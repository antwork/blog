<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Python floor devide用法(符号://)</title>
      <link href="/blog/2018/04/20/python-floor-devide/"/>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p>前两天被同事问了下//这个和/有啥区别, 有点懵, 了解了下:</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result = a // b 等价于 floor(a/b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># floor函数:</span></span><br><span class="line"><span class="comment"># floor(x)，也写做Floor(x)，其功能是“向下取整”，或者说“向下舍入”，即取不大于x的最大整数（与“四舍五入”不同，下取整是直接取按照数轴上最接近要求值的左边值，即不大于要求值的最大的那个值）。</span></span><br></pre></td></tr></table></figure><blockquote><p>floor函数有点意思, 对结果floor后总返回的是比结果更小的整数</p><p><code>10 // 3</code>  # 结果 3  == floor(3.333…) == 3</p><p><code>10 // -3</code> #结果 -4  == floor(-3.33…) == -4</p></blockquote><p>关于除法备注:</p><blockquote><p>python2整数除法返回整数</p><p>python3整数除法返回浮点数</p><p>所以在python2中检验 // 没啥效果</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Python2: </span><br><span class="line">int / int = int</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line">Python <span class="number">2.7</span><span class="number">.10</span> (default, Oct  <span class="number">6</span> <span class="number">2017</span>, <span class="number">22</span>:<span class="number">29</span>:<span class="number">07</span>)</span><br><span class="line">[GCC <span class="number">4.2</span><span class="number">.1</span> Compatible Apple LLVM <span class="number">9.0</span><span class="number">.0</span> (clang<span class="number">-900.0</span><span class="number">.31</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> / <span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line">Python3:</span><br><span class="line">int / int = float</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line">Python <span class="number">3.6</span><span class="number">.4</span> (v3<span class="number">.6</span><span class="number">.4</span>:d48ecebad5, Dec <span class="number">18</span> <span class="number">2017</span>, <span class="number">21</span>:<span class="number">07</span>:<span class="number">28</span>)</span><br><span class="line">[GCC <span class="number">4.2</span><span class="number">.1</span> (Apple Inc. build <span class="number">5666</span>) (dot <span class="number">3</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> / <span class="number">2</span></span><br><span class="line"><span class="number">0.5</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h3><p><a href="https://baike.baidu.com/item/floor函数/1344448?fr=aladdin" target="_blank" rel="noopener">floor函数说明</a></p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python3 </tag>
            
            <tag> floordevide </tag>
            
            <tag> devide </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python字符串常用函数用法</title>
      <link href="/blog/2018/04/11/python-str/"/>
      <content type="html"><![CDATA[<h2 id="python字符串常用函数用法"><a href="#python字符串常用函数用法" class="headerlink" title="python字符串常用函数用法"></a>python字符串常用函数用法</h2><p>主要介绍内容如下: 1) 存在判断    2) 字符串格式化    3) 字符串拼接 4) 其他</p><h3 id="1-字符串存在判断"><a href="#1-字符串存在判断" class="headerlink" title="1) 字符串存在判断:"></a>1) 字符串存在判断:</h3><ul><li><code>a.startswith(b)</code> a是否以b开始, 返回布尔值</li><li><code>a.endswith(b)</code> a是否以b结束, 返回布尔值</li><li><code>a in b</code> : 字符串a是否在字符串b内,  True包含, False不包含</li><li>使用<code>a.find(b)</code>找到返回位置, 找不到返回-1</li><li><code>re</code>正则匹配(以及忽略大小写写法)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'hello world'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.startswith(<span class="string">'hello'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.startswith(<span class="string">'world'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.endswith(<span class="string">'hello'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.endswith(<span class="string">'world'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ello'</span> <span class="keyword">in</span> s</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'xx'</span> <span class="keyword">in</span> s</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello'</span>.find(<span class="string">'l'</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello'</span>.find(<span class="string">'z'</span>)</span><br><span class="line"><span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(re.search(<span class="string">'[许小]路'</span>, <span class="string">'许小路'</span>))</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(re.search(<span class="string">'[许小]路'</span>, <span class="string">'小路'</span>))</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(re.search(<span class="string">'[许小]路'</span>, <span class="string">' 许路))</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; bool(re.search('</span>[许小]路<span class="string">', '</span>杨路<span class="string">'))</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string"># 忽略大小写</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; bool(re.search('</span>hello<span class="string">', '</span>HELLO WORLD<span class="string">', re.I))</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; bool(re.search('</span>hello<span class="string">', '</span>HELLO WORLD<span class="string">'))</span></span><br><span class="line"><span class="string">False</span></span><br></pre></td></tr></table></figure><h3 id="2-字符串格式化"><a href="#2-字符串格式化" class="headerlink" title="2) 字符串格式化"></a>2) 字符串格式化</h3><ul><li><p>方法1: 使用 %</p><blockquote><p>单个值直接使用 % value <code>&quot;abc %s&quot; % &#39;value&#39;</code></p><p>多个值使用Tuple</p></blockquote></li><li><p>方法2: 使用format格式化字符串</p><blockquote><p>注意: key不需要使用引号, 多个值使用逗号<code>,</code>隔开</p></blockquote></li><li><p>方法3: 使用format格式化对象</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"hello %s"</span> % <span class="string">'许路'</span></span><br><span class="line"><span class="string">'hello 许路'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"hello %s %s"</span> % (<span class="string">"许"</span>, <span class="string">"路"</span>)</span><br><span class="line"><span class="string">'hello 许 路'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"hello &#123;name&#125;"</span>.format(name=<span class="string">"许路"</span>)</span><br><span class="line"><span class="string">'hello 许路'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"hello &#123;f_name&#125;&#123;l_name&#125;"</span>.format(f_name=<span class="string">'许'</span>, l_name=<span class="string">'强'</span>)</span><br><span class="line"><span class="string">'hello 许强'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"hello &#123;f_name&#125;&#123;l_name&#125;"</span>.format(f_name=<span class="string">'许'</span>, <span class="string">'l_name'</span>=<span class="string">'强'</span>)</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span></span><br><span class="line">SyntaxError: keyword can<span class="string">'t be an expression</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 格式化对象</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; class M(object):</span></span><br><span class="line"><span class="string">...     def __init__(self, f_name, l_name):</span></span><br><span class="line"><span class="string">...             self.f_name = f_name</span></span><br><span class="line"><span class="string">...             self.l_name = l_name</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; m = M('</span>许<span class="string">', '</span>路<span class="string">')</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; "&#123;obj.f_name&#125; &#123;obj.l_name&#125;".format(obj=m)</span></span><br><span class="line"><span class="string">'</span>许 路<span class="string">'</span></span><br></pre></td></tr></table></figure><h3 id="3-字符串拼接"><a href="#3-字符串拼接" class="headerlink" title="3) 字符串拼接"></a>3) 字符串拼接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"许"</span> + <span class="string">"路"</span></span><br><span class="line"><span class="string">'许路'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在print中使用逗号分隔多个字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'yeah'</span>)</span><br><span class="line">hello world yeah</span><br></pre></td></tr></table></figure><h3 id="4-其他"><a href="#4-其他" class="headerlink" title="4) 其他"></a>4) 其他</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 长度</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">"中国"</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串分割</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'xizhipian.com'</span>.split(<span class="string">'.'</span>)</span><br><span class="line">[<span class="string">'xizhipian'</span>, <span class="string">'com'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串数组合并</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'.'</span>.join([<span class="string">'xizhipian'</span>, <span class="string">'com'</span>])</span><br><span class="line"><span class="string">'xizhipian.com'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大小写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"hello"</span>.upper()</span><br><span class="line"><span class="string">'HELLO'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Hello"</span>.lower()</span><br><span class="line"><span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"hello world"</span>.replace(<span class="string">'world'</span>, <span class="string">'qxu'</span>)</span><br><span class="line"><span class="string">'hello qxu'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"hello world world world"</span>.replace(<span class="string">'world'</span>, <span class="string">'qxu'</span>)</span><br><span class="line"><span class="string">'hello qxu qxu qxu'</span></span><br><span class="line"><span class="comment"># 指定替换次数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"hello world world world"</span>.replace(<span class="string">'world'</span>, <span class="string">'qxu'</span>, <span class="number">1</span>)</span><br><span class="line"><span class="string">'hello qxu world world'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"0123456789"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"><span class="string">'012'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str[:]</span><br><span class="line"><span class="string">'0123456789'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str[:<span class="number">-3</span>]</span><br><span class="line"><span class="string">'0123456'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str[<span class="number">-3</span>:]</span><br><span class="line"><span class="string">'789'</span></span><br></pre></td></tr></table></figure><p>参考链接:</p><p><a href="https://docs.python.org/2/library/re.html" target="_blank" rel="noopener">python re官网说明: https://docs.python.org/2/library/re.html</a></p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python3 </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rbenv使用备忘</title>
      <link href="/blog/2018/03/22/rbenv/"/>
      <content type="html"><![CDATA[<p><strong>官网网站</strong>：<a href="https://github.com/rbenv/rbenv" target="_blank" rel="noopener">https://github.com/rbenv/rbenv</a></p><p><strong>用途</strong>：管理ruby版本，类似rvm, 支持场景化配合ruby</p><p><strong>通过Homebrew安装rbenv</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> brew install rbenv</span><br><span class="line"><span class="meta">$</span> rbenv init</span><br><span class="line"><span class="meta">#</span> 按照提示将 eval "$(rbenv init -)" 放到~/.bash_profile里</span><br><span class="line"><span class="meta">$</span> vim ~/.bash_profile</span><br><span class="line"><span class="meta">#</span> 按i键，将光标移到最尾，黏贴$(rbenv init -)，按Esc键，输入:wq </span><br><span class="line"><span class="meta">#</span> 关闭terminal，打开terminal</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 检查是否安装正常</span><br><span class="line"><span class="meta">$</span> -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash</span><br><span class="line">Checking for `rbenv' in PATH: /usr/local/bin/rbenv</span><br><span class="line">Checking for rbenv shims in PATH: OK</span><br><span class="line">Checking `rbenv install' support: /usr/local/bin/rbenv-install (ruby-build 20180224)</span><br><span class="line">Counting installed Ruby versions: none</span><br><span class="line">  There aren't any Ruby versions installed under `/Users/xuq/.rbenv/versions'.</span><br><span class="line">  You can install Ruby versions like so: rbenv install 2.2.4</span><br><span class="line">Checking RubyGems settings: OK</span><br><span class="line">Auditing installed plugins: OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 更新</span><br><span class="line"><span class="meta">$</span> brew upgrade rbenv ruby-build</span><br></pre></td></tr></table></figure><p><strong>操作ruby</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 列出所有 ruby 版本</span><br><span class="line"><span class="meta">$</span> rbenv install -l </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装Ruby版本</span><br><span class="line"><span class="meta">$</span> rbenv install 2.5.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 常用打开方式</span><br><span class="line"><span class="meta">#</span> 1. 切换到要使用指定Ruby版本的文件夹</span><br><span class="line"><span class="meta">#</span> 2. 切换版本：rbenv local 2.5.0</span><br><span class="line"><span class="meta">#</span> 3. 继续调用相关指令</span><br><span class="line"><span class="meta">$</span> cd /Documents/Projects/Test</span><br><span class="line"><span class="meta">$</span> rbenv local 2.5.0</span><br><span class="line"><span class="meta">$</span> gem install fastlane -NV</span><br><span class="line"><span class="meta">#</span> 查看输出，发现已经采用了新装的ruby2.5.0</span><br><span class="line"><span class="meta">#</span> /Users/xuq/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/rouge-2.0.7/lib/rouge/lexers/tap.rb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重置当前文件夹Ruby版本</span><br><span class="line"><span class="meta">$</span> rbenv local --unset</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 设置shell指定Ruby版本，发现仅仅作用当前Shell</span><br><span class="line"><span class="meta">$</span> rbenv shell 2.5.0</span><br><span class="line"><span class="meta">$</span> rbenv shell --unset</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 列出所有版本</span><br><span class="line"><span class="meta">$</span> rbenv versions</span><br><span class="line"><span class="meta">#</span> * system (set by /Users/xuq/.rbenv/version) # 当前版本</span><br><span class="line"><span class="meta">#</span>   2.5.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 列出当前版本</span><br><span class="line"><span class="meta">$</span> rbenv version</span><br><span class="line"><span class="meta">#</span> system (set by /Users/xuq/.rbenv/version)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> rbenv,ruby,gem,fastlane </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swiftstring</title>
      <link href="/blog/2018/03/12/swiftstring/"/>
      <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ol><li>使用字面量创建字符串</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;Hello World&quot;</span><br></pre></td></tr></table></figure><ol><li>使用String对象创建字符串    </li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> strA = <span class="type">String</span>(<span class="string">"Hello My World"</span>)</span><br></pre></td></tr></table></figure><ol><li><p>创建多行字符串</p><blockquote><p>方式1: 通过<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt; 方式2: 使用三引号```&quot;&quot;&quot;字符串&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></p></blockquote></li><li><p>常用方法     </p></li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取字符串长度</span></span><br><span class="line">str.<span class="built_in">count</span>   <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接字符串</span></span><br><span class="line"><span class="keyword">let</span> str3 = str + str2 <span class="comment">// Hello World多行文本...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String和NSString转换</span></span><br><span class="line"><span class="keyword">let</span> nsStr:<span class="type">NSString</span> = str <span class="keyword">as</span> <span class="type">NSString</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断:开头</span></span><br><span class="line">str3.hasPrefix(str)      <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断:结尾</span></span><br><span class="line">str3.hasSuffix(str2)    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断:包含</span></span><br><span class="line">str3.<span class="built_in">contains</span>(str)      <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找子序列: 找到返回范围, 未找到返回nil</span></span><br><span class="line">str3.range(of: str2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串替换</span></span><br><span class="line">str3.replacingOccurrences(of: <span class="string">"第一行"</span>, with: <span class="string">"第三行"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串分隔</span></span><br><span class="line">str3.<span class="built_in">split</span>(separator: <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组合并为字符串</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>]</span><br><span class="line">arr.joined(separator: <span class="string">"_"</span>)  <span class="comment">// 1_2_3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小写转换</span></span><br><span class="line"><span class="keyword">let</span> abc = <span class="string">"aBc"</span></span><br><span class="line"><span class="keyword">let</span> upper = abc.uppercased() <span class="comment">// ABC</span></span><br><span class="line"><span class="keyword">let</span> lower = abc.lowercased() <span class="comment">// abc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化输出</span></span><br><span class="line"><span class="type">String</span>.<span class="keyword">init</span>(format: <span class="string">"%ld %f %@"</span>, <span class="number">123</span>, <span class="number">0.5</span>, <span class="string">"hello"</span>) <span class="comment">// "123 0.500000 hello"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点数保留小数点位数</span></span><br><span class="line"><span class="type">String</span>.<span class="keyword">init</span>(format: <span class="string">"%.2f"</span>, <span class="number">12.3</span>)   <span class="comment">// 12.30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 整数前加0</span></span><br><span class="line"><span class="type">String</span>.<span class="keyword">init</span>(format: <span class="string">"%05ld"</span>, <span class="number">1</span>)     <span class="comment">// 00001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串翻转</span></span><br><span class="line"><span class="type">String</span>(str.reversed())</span><br><span class="line"></span><br><span class="line"><span class="comment">// slice vs String</span></span><br><span class="line"><span class="comment">// 参考 [https://stackoverflow.com/questions/39677330/how-does-string-substring-work-in-swift](https://stackoverflow.com/questions/39677330/how-does-string-substring-work-in-swift)</span></span><br><span class="line"><span class="keyword">var</span> sli1 = str3.<span class="keyword">prefix</span>(<span class="number">5</span>)   <span class="comment">// Hello</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> index = str3.index(str3.startIndex, offsetBy: <span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> sli11 = str3.<span class="keyword">prefix</span>(upTo: index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sli2 = str3.suffix(<span class="number">5</span>)   <span class="comment">// 文本第二行</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> index2 = str3.index(str3.endIndex, offsetBy: -<span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> sli22 = str3.suffix(from: index2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> start = str3.index(str3.startIndex, offsetBy: <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> end = str3.index(str3.startIndex, offsetBy: <span class="number">7</span>)</span><br><span class="line"><span class="keyword">let</span> range = start..&lt;end</span><br><span class="line"><span class="keyword">let</span> sli3 = str3[range] <span class="comment">// ello W</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// slice to String</span></span><br><span class="line"><span class="keyword">let</span> sli22Str = <span class="type">String</span>(sli22)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误用法</span></span><br><span class="line"><span class="comment">//let sli22Str:String = sli22 // error: cannot convert value of type 'String.SubSequence' (aka 'Substring') to specified type 'String'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// utf-8Data String</span></span><br><span class="line"><span class="keyword">let</span> strForUTF8 = <span class="string">"Hello utf-8"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> convertToUtf8Data = strForUTF8.data(using: .utf8) &#123;</span><br><span class="line">    <span class="keyword">let</span> convertBackToStr = <span class="type">String</span>(data: convertToUtf8Data, encoding: .utf8)</span><br><span class="line">    <span class="built_in">print</span>(convertBackToStr ?? <span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// base64</span></span><br><span class="line"><span class="keyword">let</span> originText = <span class="string">"Hello base64"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> based = originText.data(using: .utf8)?.base64EncodedString(),</span><br><span class="line">    <span class="keyword">let</span> decodeData = <span class="type">Data</span>.<span class="keyword">init</span>(base64Encoded: based) &#123;</span><br><span class="line">    <span class="keyword">let</span> decodeStr = <span class="type">String</span>(data: decodeData, encoding: .utf8)</span><br><span class="line">    <span class="built_in">print</span>(decodeStr ?? <span class="string">""</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ios </tag>
            
            <tag> swift </tag>
            
            <tag> 苹果 </tag>
            
            <tag> apple </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift语言基础</title>
      <link href="/blog/2018/03/12/swiftbase/"/>
      <content type="html"><![CDATA[<h2 id="Swift基础"><a href="#Swift基础" class="headerlink" title="Swift基础"></a>Swift基础</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 多行注释</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注释一行</span></span><br><span class="line"><span class="comment"> * 注释二行</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello World"</span>)<span class="comment">// Hello World</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Hello"</span>, <span class="string">"World"</span>, separator: <span class="string">" "</span>, terminator: <span class="string">"."</span>) <span class="comment">//Hello Wrold."</span></span><br></pre></td></tr></table></figure><h3 id="Swift的语法特点"><a href="#Swift的语法特点" class="headerlink" title="Swift的语法特点"></a>Swift的语法特点</h3><blockquote><ol><li>语句行末不要分号. 单行多语句, 使用分号分隔(<strong>不推荐</strong>)</li><li>if不需要括号, 多条件使用逗号(,)分隔</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;Hello&quot;) </span><br><span class="line"></span><br><span class="line">// 单行多语句:</span><br><span class="line"></span><br><span class="line">// 错误方式: error: consecutive statements on a line must be separated by &apos;;&apos; print(&quot;Hello&quot;) print(&quot;World&quot;)</span><br><span class="line">print(&quot;Hello&quot;) print(&quot;World&quot;)</span><br><span class="line"></span><br><span class="line">// 正确方式</span><br><span class="line">print(&quot;Hello&quot;); print(&quot;World&quot;)</span><br><span class="line"></span><br><span class="line">if &quot;a&quot; == &quot;a&quot;, true &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="变量、常量"><a href="#变量、常量" class="headerlink" title="变量、常量"></a>变量、常量</h3><blockquote><p>使用关键词<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; 使用关键词```let```定义常量</span><br><span class="line">&gt; 语法:```[let|var] name:type = value```</span><br><span class="line"></span><br><span class="line">```swift</span><br><span class="line">var variable:String = &quot;I&apos;m variable value&quot;</span><br><span class="line"></span><br><span class="line">let constVariable:String = &quot;I&apos;m constant value&quot;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><em>备注: 通过字面量初始化变量(常量), 编译器可以通过值推断出变量(常量)类型, 所以上面代码可以简写为:</em></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> variable = <span class="string">"I'm variable value"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> constVariable = <span class="string">"I'm constant value"</span></span><br></pre></td></tr></table></figure><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 布尔值</span></span><br><span class="line"><span class="keyword">let</span> trueValue:<span class="type">Bool</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">let</span> falseValue:<span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有符号整数</span></span><br><span class="line"><span class="keyword">let</span> int8Max:<span class="type">Int8</span> = <span class="type">Int8</span>.<span class="built_in">max</span>     <span class="comment">// 127        = 2^7</span></span><br><span class="line"><span class="keyword">let</span> int16Max:<span class="type">Int16</span> = <span class="type">Int16</span>.<span class="built_in">max</span>  <span class="comment">// 32767      = 2^15</span></span><br><span class="line"><span class="keyword">let</span> int32Max:<span class="type">Int32</span> = <span class="type">Int32</span>.<span class="built_in">max</span>  <span class="comment">// 2147483647 = 2^31</span></span><br><span class="line"><span class="keyword">let</span> int64Max:<span class="type">Int64</span> = <span class="type">Int64</span>.<span class="built_in">max</span>  <span class="comment">// 9223372036854775807  = 2^63</span></span><br><span class="line"><span class="keyword">let</span> intMas:<span class="type">Int</span> = <span class="type">Int</span>.<span class="built_in">max</span>        <span class="comment">// 在32位机器值范围等同Int32, 64位机器值范围等同Int64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无符号整数</span></span><br><span class="line"><span class="keyword">let</span> uInt8Max:<span class="type">UInt8</span> = <span class="type">UInt8</span>.<span class="built_in">max</span>      <span class="comment">// 256  = 2^8</span></span><br><span class="line"><span class="keyword">let</span> uInt16Max:<span class="type">UInt16</span> = <span class="type">UInt16</span>.<span class="built_in">max</span>   <span class="comment">// 65535 = 2^16</span></span><br><span class="line"><span class="keyword">let</span> uInt32Max:<span class="type">UInt32</span> = <span class="type">UInt32</span>.<span class="built_in">max</span>   <span class="comment">// 4294967295 = 2^32</span></span><br><span class="line"><span class="keyword">let</span> uInt64Max:<span class="type">UInt64</span> = <span class="type">UInt64</span>.<span class="built_in">max</span>   <span class="comment">// 18446744073709551615 = 2^64</span></span><br><span class="line"><span class="keyword">let</span> uIntMax:<span class="type">UInt</span> = <span class="type">UInt</span>.<span class="built_in">max</span>         <span class="comment">// 在32位机器值范围等同UInt32, 64位机器值范围等同UInt64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点型</span></span><br><span class="line"><span class="keyword">let</span> floatValue:<span class="type">Float</span> = <span class="number">12.3</span></span><br><span class="line"><span class="keyword">let</span> doubleValue:<span class="type">Double</span> = <span class="number">12.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型转换</span></span><br><span class="line"><span class="keyword">var</span> int8:<span class="type">Int8</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误方法:</span></span><br><span class="line"><span class="keyword">var</span> int16_:<span class="type">Int16</span> = int8 <span class="comment">// err: cannot convert value of type 'Int8' to specified type 'Int16'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确方法:</span></span><br><span class="line"><span class="keyword">var</span> int16:<span class="type">Int16</span> = <span class="type">Int16</span>(int8)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> swfit </tag>
            
            <tag> 基础 </tag>
            
            <tag> 苹果 </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>创建博客-自动化部署Travis</title>
      <link href="/blog/2018/03/09/blog4/"/>
      <content type="html"><![CDATA[<p>travis的使用其实挺简单，简略步骤：</p><ol><li>使用github账号登录官网<a href="https://travis-ci.org" target="_blank" rel="noopener">https://travis-ci.org</a></li><li>找到项目，打开自动测试开关，添加Github个人token用于Travis推送到github</li><li>项目中添加.travis.yml配置文件</li><li>提交代码github</li><li>Traivis.ci开始自动部署</li></ol><h3 id="1-获取Github-personal-accesstoken步骤"><a href="#1-获取Github-personal-accesstoken步骤" class="headerlink" title="1. 获取Github personal accesstoken步骤"></a>1. 获取Github personal accesstoken步骤</h3><blockquote><p>方便travis免密推送内容到Github</p></blockquote><ol><li>打开github, 单击头像 - 设置<br><img src="/blog/assets/githubblog/github_token0.png" alt="github设置"></li><li>左边找到 Developers settings<br><img src="/blog/assets/githubblog/github_token1.png" alt="Developer settings"></li><li>选择”Personal access token” - “Generate new token” - 勾选”Repo” - “Generate”<br><img src="/blog/assets/githubblog/github_token2.png" alt=""><br><img src="/blog/assets/githubblog/github_token3.png" alt=""><br><img src="/blog/assets/githubblog/github_token4.png" alt=""></li><li>复制生成的Token（因为后期再也看不到，建议另外存储）<br><img src="/blog/assets/githubblog/github_token5.png" alt=""></li></ol><h3 id="配置travis"><a href="#配置travis" class="headerlink" title="配置travis"></a>配置travis</h3><ol><li>打开travis官网 - 单击头像 - 找到博客仓库 - 单击开关开启自动测试<br><img src="/blog/assets/githubblog/travis_0.png" alt=""><br><em>开启成功显示绿色箭头</em><br><img src="/blog/assets/githubblog/travis1.png" alt=""></li><li>travis中单击项目博客仓库名称进入配置项，选择”More options” - “Settings” - 在”General”中勾选”Build if only .travis.yml is present”</li><li><p>在Environmen Variables中填入GH_TOKEN, 黏贴github personal accesstoken, 单击Add(<em>不要勾Display values in build log， 会暴露该值)</em></p><blockquote><p>注意底部 Cron Jobs中勾选分支是否为blog-source，这里应该选择了github默认分支<br><img src="/blog/assets/githubblog/travis_setting.png" alt=""></p></blockquote></li><li><p>打开博客本地仓库目录，添加.travis.yml文件，输入以下内容</p></li></ol><blockquote><p>[…]为替换内容</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js: stable</span><br><span class="line">install:</span><br><span class="line">- npm install</span><br><span class="line">script:</span><br><span class="line">- hexo clean</span><br><span class="line">- hexo g</span><br><span class="line">- cd ./public</span><br><span class="line">- git init</span><br><span class="line">- git config user.name &quot;[你的名称]&quot;</span><br><span class="line">- git config user.email &quot;[github邮箱账号]&quot;</span><br><span class="line">- git add .</span><br><span class="line">- git commit -m &quot;Travis CI Auto Builder&quot;</span><br><span class="line">- git push --force --quiet &quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - blog-source</span><br><span class="line">env:</span><br><span class="line">  global:</span><br><span class="line">  - GH_REF: [博客代码仓库地址]</span><br></pre></td></tr></table></figure><ol><li>提交本地内容到Github</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;init project&quot;</span><br><span class="line">$ git push origin blog-source</span><br></pre></td></tr></table></figure><ol><li>检测效果<br> 打开Github Pages链接，地址为: https://[你的github账号].github.io/myblog/ , 检查页面是否正常<br> Github Pages配置方法参照<a href="/blog/2018/03/09/blog2/">创建博客-使用GitHub存储博客</a></li></ol><p><em>我的.travis.yml, 仅供参考</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js: stable</span><br><span class="line">install:</span><br><span class="line">- npm install</span><br><span class="line">script:</span><br><span class="line">- hexo clean</span><br><span class="line">- hexo g</span><br><span class="line">- cd ./public</span><br><span class="line">- git init</span><br><span class="line">- git config user.name &quot;antwork&quot;</span><br><span class="line">- git config user.email &quot;antwork@126.com&quot;</span><br><span class="line">- git add .</span><br><span class="line">- git commit -m &quot;Travis CI Auto Builder&quot;</span><br><span class="line">- git push --force --quiet &quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - blog-source</span><br><span class="line">env:</span><br><span class="line">  global:</span><br><span class="line">  - GH_REF: github.com/antwork/myblog.git</span><br></pre></td></tr></table></figure><h3 id="部署到自己的服务器"><a href="#部署到自己的服务器" class="headerlink" title="部署到自己的服务器"></a>部署到自己的服务器</h3><p>目前为止，Travis已经能够检测到Github blog-source分支变化，下一步是推送静态网站到自己的服务器。</p><p><strong>原理</strong>：</p><ol><li>服务端部署的是静态网站，也就是github博客的master分支，所以需要您登录您的服务器，将github master分支checkout到你指定的文件夹，然后配置好nginx，配好能够查看您的博客就表示配置ok。</li><li>travis部分：ssh登录到远程服务器，执行pull操作将github master分支更新到服务器。</li></ol><blockquote><p>因为travis都是自动化，所以不能有任何人为参与，这里就需要使用到ssh passphase登录模式。</p></blockquote><p>相关步骤参照： </p><ul><li><a href="https://segmentfault.com/a/1190000011218410" target="_blank" rel="noopener">Travis CI 系列：自动化部署博客</a></li><li><a href="https://segmentfault.com/a/1190000013242438" target="_blank" rel="noopener">不仅仅是前端er——折腾服务器武装自己</a></li></ul><p>补充几点：</p><ol><li>addons: 必须使用原文, 不能使用${ENV_VAR}，travis中定义的环境变量， 预计是addon太早引入了，环境变量还未初始化或这里根本就没处理环境变量。所以只能是如下形式：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addons:</span><br><span class="line">  ssh_known_hosts: 118.24.152.130</span><br></pre></td></tr></table></figure><ol><li>ssh正确打开方式： <code>ssh username@hostip &quot;commands&quot;</code>，我犯的错误是以为travis能够顺序执行，所以代码都写在.travis.yml中，如</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">after_success:</span><br><span class="line">- ssh username@hostip</span><br><span class="line">- cd myblog</span><br><span class="line">- pull xxx</span><br></pre></td></tr></table></figure><p>正确打开方式为，在服务端写一个执行脚本(如pullblog), 然后ssh部分改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">after_success:</span><br><span class="line">  - ssh root@118.24.152.130 &quot;./pullblog&quot;</span><br></pre></td></tr></table></figure><blockquote><p>将服务端的命令打包为一个shell脚本, 对外隐藏了具体内容, 可以保护隐私内容。</p></blockquote><p><em>我的pullblog脚本如下：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;run begin&quot;</span><br><span class="line">cd /home/www/blog # 打开git文件夹</span><br><span class="line">git config user.name &quot;antwork&quot; # 修改name</span><br><span class="line">git config user.email &quot;antwork@126.com&quot; # 修改email</span><br><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull</span><br><span class="line">echo &quot;run end&quot;</span><br></pre></td></tr></table></figure><blockquote><ul><li>注意我已经拉取博客仓库代码到服务器文件夹/home/www/blog中，所以travis只要执行pull就可以了    </li><li>因为静态网站变化挺多的，所以合并时使用服务器版本。</li></ul></blockquote><h3 id="关于ssh"><a href="#关于ssh" class="headerlink" title="关于ssh"></a>关于ssh</h3><p><a href="https://www.ssh.com/ssh/command/#sec-SSH-Command-in-Linux" target="_blank" rel="noopener">https://www.ssh.com/ssh/command/#sec-SSH-Command-in-Linux</a><br>在其他服务器上远程执行代码， 语法：<code>ssh hostname command</code><br>实际测试以下两个命令是等效的, 脚本应该是通过调用了eval(“字符串”）来实现调用功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh root@118.24.152.130 "ls /home/www"</span><br><span class="line">ssh root@118.24.152.130 ls /home/www</span><br></pre></td></tr></table></figure><p>到此博客就算搭完了😊，后续博文只要写好后推送到github仓库，travis就会自动生成静态网站，然后推送回github，并且触发服务端的脚本来服务器的静态网站。写完三篇都累屎了，完结撒花~</p><hr><p>创建博客系列</p><ul><li><a href="/blog/2018/03/09/blog2/">创建博客-使用GitHub存储博客</a></li><li><a href="/blog/2018/03/09/blog3/">创建博客-Hexo生成博客网站</a></li><li><a href="/blog/2018/03/09/blog4/">创建博客-自动化部署Travis</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> travis </tag>
            
            <tag> ci </tag>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>创建博客-Hexo生成博客网站</title>
      <link href="/blog/2018/03/09/blog3/"/>
      <content type="html"><![CDATA[<blockquote><p>仓库准备好了，就等文章到碗里来了，这里选用hexo, 想着原来就用过，上手会挺快。😔，实际做着高大上， 默认是英文界面，看了半天的英文才发现有中文版。<br><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo中文官网</a><br><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">docs/commands.html</a></p></blockquote><h3 id="打开方式"><a href="#打开方式" class="headerlink" title="打开方式"></a>打开方式</h3><blockquote><p>注：以下脚本中#之后为注释，不需要键入<br>打开终端</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd myblog   # 打开博客文件夹(可键入cd 然后将博客文件夹拖入终端)</span><br><span class="line"><span class="meta">$</span> mkdir temp  # 创建临时文件夹(原因最后解释）</span><br><span class="line"><span class="meta">$</span> cd temp  # 打开临时文件夹</span><br><span class="line"><span class="meta">$</span> hexo init   # 初始hexo</span><br><span class="line">...  # 一堆信息， 最后提示Start blogging with Hexo!</span><br><span class="line"><span class="meta">$</span> cd ..  # 切回父文件夹</span><br><span class="line"><span class="meta">$</span> mv temp/* . # 将temp里的内容移到父文件夹</span><br><span class="line"><span class="meta">$</span> ls   # 通过ls命令检查是否移动成功</span><br><span class="line">_config.ymlpackage.jsontemp</span><br><span class="line">node_modulesscaffoldsthemes</span><br><span class="line">package-lock.jsonsource</span><br><span class="line"><span class="meta">$</span> rm -rf temp # 移除temp文件夹</span><br><span class="line"><span class="meta">$</span> ls  # 通过ls命令检查是否删除temp成功</span><br><span class="line">_config.ymlpackage.jsonthemes</span><br><span class="line">node_modulesscaffolds</span><br><span class="line">package-lock.jsonsource</span><br><span class="line"><span class="meta">$</span> hexo g# 生成静态网站</span><br><span class="line"><span class="meta">$</span> hexo s# 开启本机服务，用于本地预览静态网站</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:5000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>打开浏览器，输入 localhost:4000，见到下图表示你成功了🎉🎉🎉。<br><img src="/blog/assets/githubblog/Snip20180311_18.png" alt="hexo本地服务启动成功"></p><h4 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new 你好hexo # 使用hexo new 创建博文</span><br><span class="line">INFO  Created: ~/Documents/GitHub/myblog/source/_posts/你好hexo.md # 提示成功，并告知文件地址。</span><br><span class="line"><span class="meta">$</span> hexo clean    # 清除public等已生成静态网站</span><br><span class="line"><span class="meta">$</span> hexo g# 重新生成静态网站</span><br><span class="line"><span class="meta">$</span> hexo s # 开启本地预览服务</span><br></pre></td></tr></table></figure><p>如下图所示，新写的你好hexo.md已经成功上屏了。<br><img src="/blog/assets/githubblog/Snip20180311_20.png" alt="hexo本地服务启动成功"></p><h3 id="草稿-发布模式"><a href="#草稿-发布模式" class="headerlink" title="草稿-发布模式"></a>草稿-发布模式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new draft hello2 # 创建草稿</span><br><span class="line"><span class="meta">$</span> hexo g# 生成网站</span><br><span class="line"><span class="meta">$</span> hexo s --draft# 开启本地服务-草稿模式，否则看不到草稿</span><br><span class="line"><span class="meta">$</span> hexo publish hello2   # 发布hello2</span><br><span class="line"><span class="meta">$</span> hexo s    # 开启本地服务</span><br></pre></td></tr></table></figure><p>草稿模式（成功发布）后如下图所示：<br><img src="/blog/assets/githubblog/Snip20180311_22.png" alt="hexo本地服务启动成功"></p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p><strong>Q1</strong>: 如果hexo s提示错误： Port 4000 has been used. Try other port instead.<br><strong>A1</strong>: 使用 hexo s -p 5000 将端口指定为5000</p><p><strong>Q2</strong>: 为啥要创建临时文件夹，不直接在blog目录调用hexo init, 官网文档，如果init后面没有文件夹，则在当前文件夹初始<br><strong>A2</strong>: 原因为当前文件夹已存在文件，并且因为是git仓库，肯定会有.git文件夹，这里通过创建临时文件夹避开这个错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FATAL ~/Documents/GitHub/myblog not empty, please run `hexo init` on an empty folder and then copy your files into it</span><br><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure><p>博客建完，你可能注意到我们并没有使用hexo的部署功能，因为我们准备使用travis自动化部署，进入下一篇<a href="/blog/2018/03/09/blog4/">创建博客-自动化部署Traviss</a></p><p><em>补充内容</em></p><hr><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令:"></a>常用指令:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder] # 新建一个网站, 如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。没看文档吃亏了，搞了个子文件夹，后面各种不舒适。</span><br><span class="line"></span><br><span class="line">hexo g # 生成静态网站</span><br><span class="line"></span><br><span class="line">hexo s # 启动服务, 默认通过localhost:4000可以访问静态网站</span><br><span class="line"></span><br><span class="line">hexo new [layout] title # 生成新文章, 默认layout为post, 还可以是draft</span><br><span class="line"></span><br><span class="line">hexo clean # 删除静态网站, 然后再次调用`hexo g` </span><br><span class="line"></span><br><span class="line">hexo d # 部署</span><br><span class="line"></span><br><span class="line">hexo s --debug # 启动服务, 调试模式, 可以查看日志</span><br><span class="line"></span><br><span class="line">hexo s -p 5000 # 启动服务, 端口=5000</span><br></pre></td></tr></table></figure><h3 id="关于主题："><a href="#关于主题：" class="headerlink" title="关于主题："></a>关于主题：</h3><ol><li>以前老想着抠人家的css, 各种复杂，hexo提供了近200个主题可供选择：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a>   </li><li>找到满意的主题，然后找到对应的github网址(<em>基本所有主题都会在网页最底端提供链接指向主题网址</em>), 类似如下：<br><img src="/blog/assets/theme_snap.png" alt="主题源码">        </li><li><p>单个主题文件夹如下图所示，原理很简单, 将主题文件夹如landscape拷贝到themes文件夹下（网上方法为gitclone，原理一样），编辑<strong>项目的_config.yml(不是主题里文件夹里的_config.yml,不是主题里文件夹里的_config.yml,不是主题里文件夹里的_config.yml)</strong>,找到<code>theme: [主题文件夹名称]</code>, 将[主题文件夹名称]换成你新加的主题文件夹名称；修改了项目的_config.yml要重启服务才生效。</p></li><li><p>你可以到主题的_config.yml里配置是否需要显示about等特殊定制，具体见使用的主题。</p></li></ol><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>[参考博客]：</p><ul><li><p><a href="https://zty.js.org/post/2016/07/08/hexo-localsearch.html" target="_blank" rel="noopener">实现Hexo next 主题博客本地站内搜索 - True Me</a></p></li><li><p><a href="http://www.itfanr.cc/2017/10/27/add-search-function-to-hexo-blog/" target="_blank" rel="noopener">Hexo博客添加搜索功能</a></p></li></ul><p>基本原理都是使用<code>hexo-generator-searchdb</code>, 我的问题是我装完了，但还看不到搜索框， 原因是因为主题里没有开启<code>enable: false</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https://github.com/flashlab/hexo-generator-search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure><hr><p>心酸心爽博客系列</p><ul><li><a href="/blog/2018/03/09/blog2/">创建博客-使用GitHub存储博客</a></li><li><a href="/blog/2018/03/09/blog3/">创建博客-Hexo生成博客网站</a></li><li><a href="/blog/2018/03/09/blog4/">创建博客-自动化部署Travis</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> travis </tag>
            
            <tag> ci </tag>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>创建博客-使用GitHub存储博客</title>
      <link href="/blog/2018/03/09/blog2/"/>
      <content type="html"><![CDATA[<h3 id="为什么选择Github？："><a href="#为什么选择Github？：" class="headerlink" title="为什么选择Github？："></a>为什么选择Github？：</h3><ol><li>方便；有了仓库，可以随便换电脑写博文；有版本管理，可以很好的迭代；</li><li>公开；我的博文没啥私密文章，所以随便啦；</li><li>强大；通过GitHub Pages即使没有域名和服务器，也能生成静态网站。</li></ol><h3 id="使用步骤（清爽版）"><a href="#使用步骤（清爽版）" class="headerlink" title="使用步骤（清爽版）"></a>使用步骤（清爽版）</h3><ol><li><p>新建仓库</p><blockquote><p>添加README，有提交记录才会有master分支(<em>第一次发现空仓库连master分支都没有</em>)</p></blockquote></li><li><p>创建新分支<code>blog-source</code></p></li><li><p>将分支blog-source设置为默认分支</p><blockquote><p>设置默认分支为非master原因: 1) master存储静态网站, 不需关注; 2) 远程默认分支为blog-resoure, 有助于提交代码;     </p></blockquote><p> 操作步骤：</p><p> step1: 切换到项目主页, 如<a href="https://github.com/antwork/myblog" target="_blank" rel="noopener">https://github.com/antwork/myblog</a></p><p> step2: 找到设置(Settings)</p><p> step3: 找到分支(Branchs)</p><p> step4: 找到 <code>Default Branch</code>, 将<code>master</code>更新为<code>blog-source</code>, 单击<code>Update</code>, 单击<code>i understand ...</code></p></li></ol><ol><li><p>开启Github pages</p><blockquote><p>目的: 通过链接 <a href="https://antwork.github.io/blog/" target="_blank" rel="noopener">https://antwork.github.io/blog/</a> 就可以像访问普通网站一样访问我的博客了, 而<a href="https://github.com/antwork/blog" target="_blank" rel="noopener">https://github.com/antwork/blog</a> 访问的是代码页面</p></blockquote><p> 步骤同3, Settings - Options - Github Pages, 默认为none, 选中Master分支, 然后Save.</p></li><li><p>克隆项目到本地</p></li></ol><h3 id="使用步骤（截图版）"><a href="#使用步骤（截图版）" class="headerlink" title="使用步骤（截图版）"></a>使用步骤（截图版）</h3><h4 id="1-创建新仓库"><a href="#1-创建新仓库" class="headerlink" title="1. 创建新仓库"></a>1. 创建新仓库</h4><p>打开主页<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a>; 选择右上角加号，选中“New repository”<br><img src="/blog/assets/githubblog/github_blog0.png" alt="创建新仓库"><br><img src="/blog/assets/githubblog/github_blog1.png" alt="创建新仓库"></p><h4 id="2-创建blog-source分支"><a href="#2-创建blog-source分支" class="headerlink" title="2. 创建blog-source分支"></a>2. 创建blog-source分支</h4><p>   1) 单击”Branch:master”，输入分支名blog-source, 回车(截图为后补图，原理一样，当发现分支不存在时会创建分支)<br><img src="/blog/assets/githubblog/github_blog2.png" alt="test"><br>    2） 分支创建完效果图<br><img src="/blog/assets/githubblog/github_blog3.png" alt="test"></p><h4 id="3-设置默认分支"><a href="#3-设置默认分支" class="headerlink" title="3. 设置默认分支"></a>3. 设置默认分支</h4><p>1) 步骤：”Settings” - “Branches” - “Default branch” - 单击”master” - 选择 “blog-source” - 单击 “update” - 单击 “I understand …”<br><img src="/blog/assets/githubblog/github_blog4.png" alt="test"><br><img src="/blog/assets/githubblog/github_blog5.png" alt="test"><br>2) 更改默认分支后效果图：<br><img src="/blog/assets/githubblog/github_blog6.png" alt="test"></p><h4 id="4-开启Github-Pages"><a href="#4-开启Github-Pages" class="headerlink" title="4. 开启Github Pages"></a>4. 开启Github Pages</h4><blockquote><p>目的: 通过链接 <a href="https://antwork.github.io/blog/" target="_blank" rel="noopener">https://antwork.github.io/blog/</a> 就可以像访问普通网站一样访问我的博客了, 而<a href="https://github.com/antwork/blog" target="_blank" rel="noopener">https://github.com/antwork/blog</a> 访问的是代码页面</p></blockquote><p>类似步骤3，操作顺序：Settings - Options - Github Pages, 默认选中了<code>none</code>, 选中<code>Master</code>分支, 然后Save</p><h4 id="5-克隆代码仓到本地"><a href="#5-克隆代码仓到本地" class="headerlink" title="5. 克隆代码仓到本地"></a>5. 克隆代码仓到本地</h4><p>1）打开项目页面<br>2）”Code” - “Clone or download” - 单击“复制按钮”（或自己复制地址）<br><img src="/blog/assets/githubblog/github_blog7.png" alt="test"><br>3）本地打开终端（我用的是iterm)<br>4) 打开博客准备存储文件夹, 输入指令<code>git clone [你的仓库地址]</code><br>5）使用cd打开blog文件夹<br>6）通过git branch检测当前分支为blog-source</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">qiangdeMBP:GitHub xuq$ git clone https://github.com/antwork/myblog.git</span><br><span class="line">Cloning into &apos;myblog&apos;...</span><br><span class="line">remote: Counting objects: 3, done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), done.</span><br><span class="line"></span><br><span class="line">qiangdeMBP:GitHub xuq$ cd myblog</span><br><span class="line"></span><br><span class="line">qiangdeMBP:myblog xuq$ git branch</span><br><span class="line">* blog-source</span><br></pre></td></tr></table></figure><h3 id="关于仓库使用方案的确定："><a href="#关于仓库使用方案的确定：" class="headerlink" title="关于仓库使用方案的确定："></a>关于仓库使用方案的确定：</h3><p>网上调研了下，方案基本有两种:</p><ul><li>使用两个仓库, 一个用于存储源码, 一个用于存储静态网站    </li><li>一个仓库, 使用不同分支    </li></ul><p>综合对比, 方案2怎么都比方案1清爽, 花了点时间研究了下, 最终的方案如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* blog-source  # 存储源码（包括后面的hexo\markdown文章等）</span><br><span class="line">  master       # 存储静态网站（有源码得到的静态网站，部署前基本是个空文件夹）</span><br></pre></td></tr></table></figure><blockquote><p>由于不了解hexo的部署，此处卡壳了下，不要想太多将master留空就好了。</p></blockquote><p><em>下一篇：</em> <a href="/blog/2018/03/09/blog3/">创建博客-Hexo生成博客网站</a></p><hr><p>创建博客系列</p><ul><li><a href="/blog/2018/03/09/blog2/">创建博客-使用GitHub存储博客</a></li><li><a href="/blog/2018/03/09/blog3/">创建博客-Hexo生成博客网站</a></li><li><a href="/blog/2018/03/09/blog4/">创建博客-自动化部署Travis</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> travis </tag>
            
            <tag> ci </tag>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>创建博客-前传</title>
      <link href="/blog/2018/03/09/blog1/"/>
      <content type="html"><![CDATA[<blockquote><p><em>前传的前言</em>:     </p><ol><li>看了篇不错的博客<em><a href="https://segmentfault.com/a/1190000013242438" target="_blank" rel="noopener">不仅仅是前端er——折腾服务器武装自己</a></em>。        </li><li>今年想着转型, 需要多拓展知识, 接触各方面的知识。        </li><li>v2ex上瞄到腾讯云在做活动, 厚着脸皮假装自己是学生买了个6年360块的服务器。</li></ol><p>服务器到手后想着捣鼓点啥呢, 思来想去最简单的就是博客, 就先倒腾博客上去吧. 问题来了, 之前使用github pages写的, 换台电脑之后只记得将文章拷贝过来, 怎么使用都忘光了, 折腾了几天, 终于有点小成果. - -!!</p></blockquote><p><em>本来想一篇搞定, 奈何发现都挺复杂的, 那就分开写吧</em></p><ul><li><a href="/blog/2018/03/09/blog2/">创建博客-使用GitHub存储博客</a></li><li><a href="/blog/2018/03/09/blog3/">创建博客-Hexo生成博客网站</a></li><li><a href="/blog/2018/03/09/blog4/">创建博客-自动化部署Travis</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> travis </tag>
            
            <tag> ci </tag>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python study os.path os path</title>
      <link href="/blog/2018/01/19/2018-1-19-python-os-path/"/>
      <content type="html"><![CDATA[<p>##os.path使用示例</p><p><em>参考 <a href="http://blog.51cto.com/wangwei007/1104940" target="_blank" rel="noopener">python os.path模块常用方法详解</a></em></p><h3 id="0-前置"><a href="#0-前置" class="headerlink" title="0. 前置"></a>0. 前置</h3><ul><li>import os.path module</li><li>示例文件路径: /Users/bill/Documents/Study/Python</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import os.path</span><br></pre></td></tr></table></figure><p>###1. os.path.abspath获取绝对地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.abspath(&apos;readme.txt&apos;)</span><br><span class="line">&apos;/Users/bill/Documents/Study/Python/readme.txt&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.abspath(&apos;/Users/bill/Documents/Study/Python/readme.txt&apos;)</span><br><span class="line">&apos;/Users/bill/Documents/Study/Python/readme.txt&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.abspath(r&apos;../Python/readme.txt&apos;)</span><br><span class="line">&apos;/Users/bill/Documents/Study/Python/readme.txt&apos;</span><br></pre></td></tr></table></figure></p><p>###2. os.path.split将路径分割为目录和文件名两部分 path = (dir, filename)<br><em>注意: 目录必须以’/‘结尾, 否则最后一级会被当成filename</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.split(&apos;/Users/bill/Documents/Study/Python/readme.txt&apos;)</span><br><span class="line">(&apos;/Users/bill/Documents/Study/Python&apos;, &apos;readme.txt&apos;)</span><br><span class="line">&gt;&gt;&gt; os.path.split(&apos;/Users/bill/Documents/Study/Python/&apos;)</span><br><span class="line">(&apos;/Users/bill/Documents/Study/Python&apos;, &apos;&apos;)</span><br><span class="line">&gt;&gt;&gt; os.path.split(&apos;/Users/bill/Documents/Study/Python&apos;)</span><br><span class="line">(&apos;/Users/bill/Documents/Study&apos;, &apos;Python&apos;)</span><br><span class="line">&gt;&gt;&gt; os.path.split(&apos;readme.txt&apos;)</span><br><span class="line">(&apos;&apos;, &apos;readme.txt&apos;)</span><br></pre></td></tr></table></figure><p>###3. os.path.dirname获取路径中目录部分, 本质是os.path.split的第一部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.dirname(&apos;readme.txt&apos;)</span><br><span class="line">&apos;&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.dirname(&apos;/Users/bill/Documents/Study/Python/readme.txt&apos;)</span><br><span class="line">&apos;/Users/bill/Documents/Study/Python&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.dirname(&apos;/Users/bill/Documents/Study/Python/&apos;)</span><br><span class="line">&apos;/Users/bill/Documents/Study/Python&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.dirname(&apos;/Users/bill/Documents/Study/Python&apos;)</span><br><span class="line">&apos;/Users/bill/Documents/Study&apos;</span><br></pre></td></tr></table></figure></p><h3 id="4-os-path-basename获取路径文件名-本质是os-path-split的第二部分"><a href="#4-os-path-basename获取路径文件名-本质是os-path-split的第二部分" class="headerlink" title="4. os.path.basename获取路径文件名, 本质是os.path.split的第二部分"></a>4. os.path.basename获取路径文件名, 本质是os.path.split的第二部分</h3><p><strong>注</strong>: 如果文件夹末尾没有添加’/‘, 会将文件夹最后一部分当成文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.basename(&apos;/Users/bill/Documents/Study/Python/readme.txt&apos;)</span><br><span class="line">&apos;readme.txt&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.basename(&apos;/Users/bill/Documents/Study/Python/&apos;)</span><br><span class="line">&apos;&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.basename(&apos;/Users/bill/Documents/Study/Python&apos;)</span><br><span class="line">&apos;Python&apos;</span><br></pre></td></tr></table></figure><h3 id="5-os-path-commonprefix获取list中路径共有的最长路径"><a href="#5-os-path-commonprefix获取list中路径共有的最长路径" class="headerlink" title="5. os.path.commonprefix获取list中路径共有的最长路径"></a>5. os.path.commonprefix获取list中路径共有的最长路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.commonprefix([&apos;/usr/bin/a.txt&apos;, &apos;/usr/bin/bin1/b.txt&apos;, &apos;/usr/bin/bin2/c.txt&apos;])</span><br><span class="line">&apos;/usr/bin/&apos;</span><br></pre></td></tr></table></figure><h3 id="6-os-path-exists判断文件是否存在"><a href="#6-os-path-exists判断文件是否存在" class="headerlink" title="6. os.path.exists判断文件是否存在"></a>6. os.path.exists判断文件是否存在</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.exists(&apos;/Users/bill/Documents/Study/Python/readme.txt&apos;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; os.path.exists(&apos;/Users/bill/Documents/Study/Python/nonexist.txt&apos;)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h3 id="7-os-path-isabs判断是否绝对路径"><a href="#7-os-path-isabs判断是否绝对路径" class="headerlink" title="7. os.path.isabs判断是否绝对路径"></a>7. os.path.isabs判断是否绝对路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.isabs(&apos;/Users/bill/Documents/Study/Python/readme.txt&apos;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; os.path.isabs(&apos;./a/b&apos;)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h3 id="8-os-path-isfile判断是否文件"><a href="#8-os-path-isfile判断是否文件" class="headerlink" title="8. os.path.isfile判断是否文件"></a>8. os.path.isfile判断是否文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.isfile(&apos;/Users/bill/Documents/Study/Python/readme.txt&apos;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; os.path.isfile(&apos;/Users/bill/Documents/Study/Python/&apos;)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h3 id="9-os-path-isdir判断是否文件夹"><a href="#9-os-path-isdir判断是否文件夹" class="headerlink" title="9. os.path.isdir判断是否文件夹"></a>9. os.path.isdir判断是否文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.isdir(&apos;/Users/bill/Documents/Study/Python/readme.txt&apos;)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; os.path.isdir(&apos;/Users/bill/Documents/Study/Python/&apos;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; os.path.isdir(&apos;/Users/bill/Documents/Study/Python&apos;)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="10-os-path-join将参数拼成完整路径-第一个绝对参数之前的参数会被忽略"><a href="#10-os-path-join将参数拼成完整路径-第一个绝对参数之前的参数会被忽略" class="headerlink" title="10. os.path.join将参数拼成完整路径, 第一个绝对参数之前的参数会被忽略"></a>10. os.path.join将参数拼成完整路径, 第一个绝对参数之前的参数会被忽略</h3><p><em>随便传了个数组参数竟然直接返回了数组</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.join([&apos;/usr&apos;, &apos;bin&apos;, &apos;python&apos;])</span><br><span class="line">[&apos;/usr&apos;, &apos;bin&apos;, &apos;python&apos;]</span><br><span class="line">&gt;&gt;&gt; os.path.join(&apos;usr&apos;, &apos;bin&apos;, &apos;python&apos;)</span><br><span class="line">&apos;usr/bin/python&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.join(&apos;notshow&apos;, &apos;/usr&apos;, &apos;bin&apos;)</span><br><span class="line">&apos;/usr/bin&apos;</span><br></pre></td></tr></table></figure><h3 id="11-os-path-normcase-path-在windows平台会将路径中所有字符转换为小写-并将所有斜杠转为反斜杠-linux-Mac直接返回path"><a href="#11-os-path-normcase-path-在windows平台会将路径中所有字符转换为小写-并将所有斜杠转为反斜杠-linux-Mac直接返回path" class="headerlink" title="11. os.path.normcase(path), 在windows平台会将路径中所有字符转换为小写, 并将所有斜杠转为反斜杠, linux/Mac直接返回path"></a>11. os.path.normcase(path), 在windows平台会将路径中所有字符转换为小写, 并将所有斜杠转为反斜杠, linux/Mac直接返回path</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># mac平台</span><br><span class="line">&gt;&gt;&gt; os.path.normcase(&apos;/Users/lunkr/Documents/Study/Python/readme.txt&apos;)</span><br><span class="line">&apos;/Users/lunkr/Documents/Study/Python/readme.txt&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.normcase(&apos;/Users/lunkr/Documents/Study/Python\readme.txt&apos;)</span><br><span class="line">&apos;/Users/lunkr/Documents/Study/Python\readme.txt&apos;</span><br><span class="line"></span><br><span class="line"># windows</span><br><span class="line">&gt;&gt;&gt; os.path.normpath(&apos;c://windows\\System32\\../Temp/&apos;) </span><br><span class="line">&apos;c:\\windows\\Temp&apos; </span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="12-os-path-splitdrive-gt-tuple-盘符-相对路径"><a href="#12-os-path-splitdrive-gt-tuple-盘符-相对路径" class="headerlink" title="12. os.path.splitdrive -&gt; tuple:(盘符, 相对路径)"></a>12. os.path.splitdrive -&gt; tuple:(盘符, 相对路径)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.splitdrive(&apos;/Users/bill/Documents/Study/Python/readme.txt&apos;)</span><br><span class="line">(&apos;&apos;, &apos;/Users/bill/Documents/Study/Python/readme.txt&apos;)</span><br></pre></td></tr></table></figure><h3 id="13-os-path-splitext获取文件名扩展"><a href="#13-os-path-splitext获取文件名扩展" class="headerlink" title="13. os.path.splitext获取文件名扩展"></a>13. os.path.splitext获取文件名扩展</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.splitext(&apos;/Users/bill/Documents/Study/Python/readme.txt&apos;)</span><br><span class="line">(&apos;/Users/bill/Documents/Study/Python/readme&apos;, &apos;.txt&apos;)</span><br><span class="line">&gt;&gt;&gt; os.path.splitext(&apos;/Users/bill/Documents/Study/Python/readme&apos;)</span><br><span class="line">(&apos;/Users/bill/Documents/Study/Python/readme&apos;, &apos;&apos;)</span><br></pre></td></tr></table></figure><h3 id="14-获取文件大小"><a href="#14-获取文件大小" class="headerlink" title="14. 获取文件大小"></a>14. 获取文件大小</h3><p><em>—- 如果文件不存在, 会报OSError</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.getsize(&apos;/Users/bill/Documents/Study/Python/readme.txt&apos;)</span><br><span class="line">472</span><br><span class="line">&gt;&gt;&gt; os.path.getsize(&apos;/Users/bill/Documents/Study/Python/nonexist.txt&apos;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/genericpath.py&quot;, line 49, in getsize</span><br><span class="line">    return os.stat(filename).st_size</span><br><span class="line">OSError: [Errno 2] No such file or directory: &apos;/Users/bill/Documents/Study/Python/nonexist.txt&apos;</span><br></pre></td></tr></table></figure><h3 id="15-os-path-getatime获取文件最后存取时间"><a href="#15-os-path-getatime获取文件最后存取时间" class="headerlink" title="15. os.path.getatime获取文件最后存取时间"></a>15. os.path.getatime获取文件最后存取时间</h3><p><em>—- 如果文件不存在, 会报OSError</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.getatime(&apos;/Users/bill/Documents/Study/Python/readme.txt&apos;)</span><br><span class="line">1516322694.9506512</span><br><span class="line">&gt;&gt;&gt; os.path.getatime(&apos;/Users/bill/Documents/Study/Python/nonexist.txt&apos;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/genericpath.py&quot;, line 59, in getatime</span><br><span class="line">    return os.stat(filename).st_atime</span><br><span class="line">OSError: [Errno 2] No such file or directory: &apos;/Users/bill/Documents/Study/Python/nonexist.txt&apos;</span><br></pre></td></tr></table></figure><h3 id="16-os-path-getmtime获取文件最后修改时间"><a href="#16-os-path-getmtime获取文件最后修改时间" class="headerlink" title="16. os.path.getmtime获取文件最后修改时间"></a>16. os.path.getmtime获取文件最后修改时间</h3><p><em>—- 如果文件不存在, 会报OSError</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.getmtime(&apos;/Users/bill/Documents/Study/Python/readme.txt&apos;)</span><br><span class="line">1516169147.8499017</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS状态栏颜色变更</title>
      <link href="/blog/2017/06/25/2017-6-25-StatusBarColor/"/>
      <content type="html"><![CDATA[<p>iOS状态栏颜色变更    </p><ol><li>怎么改变状态栏颜色                </li><li>UINavigationController下的状态栏不起作用怎么办                    <a id="more"></a>    </li></ol><p><a href="/assets/StatusBar.zip">演示项目下载</a></p><h2 id="实验"><a href="#实验" class="headerlink" title="实验:"></a>实验:</h2><p><strong>前提1: 没有导航栏的单控制器工程</strong><br><strong>前提2:    UIViewControllerBasedStatusBarAppearance = false</strong></p><p>实验一:<br>条件. 项目Target-General-StatusBarStyle-default<br><em>结果: <img src="/assets/UIViewControllerBasedStatusBarAppearance1.png" alt="状态栏黑色"></em>        </p><p>实验二:<br>条件: 项目Target-General-StatusBarStyle-lightContent<br><em>结果: <img src="/assets/UIViewControllerBasedStatusBarAppearance2.png" alt="状态栏白色"></em><br>实验三:<br>条件1: 项目Target-General-StatusBarStyle-lightContent<br>条件2: ViewController重写<code>preferredStatusBarStyle</code>方法        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override var preferredStatusBarStyle: UIStatusBarStyle &#123;</span><br><span class="line">    return .default</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>结果:    结果同实验二, 状态栏并没有使用<code>preferredStatusBarStyle</code>显示黑色导航栏, 而是显示了白色状态栏</em></p><p>实验四:<br>条件1: 项目Target-General-StatusBarStyle-lightContent<br>条件2: 在ViewController的<code>ViewDidLoad</code>方法中添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">override func viewDidLoad() &#123;</span><br><span class="line">    super.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    UIApplication.shared.setStatusBarStyle(.default, animated: true)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>结果:    结果同实验一, 显示黑色导航栏</em>        </p><p><strong>总结一</strong>: UIViewControllerBasedStatusBarAppearance=false时, 影响导航栏颜色的方式有两个:        </p><ol><li>info.plist中的UIStatusBarStyle(效果同项目Target-General-StatusBarStyle);         </li><li>通过配置UIApplication的setStatusBarStyle方法;</li></ol><p><strong>更改前提条件</strong><br><strong> 前提1: 没有导航栏的单控制器工程    </strong><br><strong> 前提2:    UIViewControllerBasedStatusBarAppearance = true </strong></p><p>实验五:<br>条件1: ViewController没有重写<code>preferredStatusBarStyle</code>方法<br>条件2: 项目Target-General-StatusBarStyle-lightContent(项目Target-General-StatusBarStyle-default)</p><p><em>结果: 状态栏一直为黑色</em></p><p>实验六:<br>条件: 重写ViewController 的<code>preferredStatusBarStyle</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override var preferredStatusBarStyle: UIStatusBarStyle &#123;</span><br><span class="line">    return .default</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>结果: 状态栏黑色(设置项目Target-General-StatusBarStyle-lightContent不影响结果)</em></p><p>实验七:<br>条件: 重写ViewController 的<code>preferredStatusBarStyle</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override var preferredStatusBarStyle: UIStatusBarStyle &#123;</span><br><span class="line">    return .lightContent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>结果: 状态栏白色(设置项目Target-General-StatusBarStyle-default不影响结果)</em></p><p><strong>结果: UIViewControllerBasedStatusBarAppearance基于控制器的状态栏显示, 实际是由<code>preferredStatusBarStyle</code>返回值决定, 默认<code>default</code>为黑色文字, <code>lightContent</code>显示白色文字</strong></p><p>实验八:<br>将ViewController放入UINavigationController中<br><em>结果: <code>preferredStatusBarStyle</code>不起作用, <code>项目Target-General-StatusBarStyle-lightContent</code>也不起作用</em><br><em>结果分析: UINavigationController作为容器返回了它的preferredStatusBarStyle导致控制器设置无效</em></p><p>为了解决这个问题, 引入了一个自定义UINavigtaionController, 将Storyboard中的导航栏class替换为<code>CustomNavigationController</code>                        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">class CustomNavigationController : UINavigationController &#123;</span><br><span class="line">    override var preferredStatusBarStyle: UIStatusBarStyle &#123;</span><br><span class="line">        return .lightContent</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题解决:<br><img src="/assets/UIViewControllerBasedStatusBarAppearance3.png" alt="状态栏白色"></p><p>但是又引入新问题了, 如果继承了导航栏, 如果需要变换导航栏风格,就需要经常的变换CustomNavigation的<code>preferredStatusBarStyle</code>, 为了解决这个问题, 苹果引入了<code>childViewControllerForStatusBarStyle</code>, 将CustomNavigationController更新如下, 则状态栏的会使用栈顶的ViewController的<code>preferredStatusBarStyle</code>:        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">class CustomNavigationController : UINavigationController &#123;</span><br><span class="line">    override var childViewControllerForStatusBarStyle: UIViewController? &#123;</span><br><span class="line">        return self.topViewController</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官方解释: If your container view controller derives its status bar style from one of its child view controllers, implement this method and return that child view controller. If you return nil or do not override this method, the status bar style for self is used. If the return value from this method changes, call the<br>setNeedsStatusBarAppearanceUpdate()<br> method.</p><p>翻译: 简而言之就是容器控制器需要根据子控制器来决定状态栏颜色, 实现该方法并返回对应的子控制器. 当返回nil或者没有实现该方法则使用默认的, 如果<code>childViewControllerForStatusBarStyle</code>的返回值更新了, 需要调用<code>setNeedsStatusBarAppearanceUpdate</code></p><p>到此关于状态栏变更的内容就讲完了, 主要分两种情况:        </p><ol><li>有导航栏, 并且希望中途修改导航栏颜色, 则自定义一个导航栏, 配置其<code>childViewControllerForStatusBarStyle</code>为栈顶控制器, 然后在需要自定义颜色的控制器中重写<code>preferredStatusBarStyle</code>方法        </li><li>没有导航栏并且希望中途改变导航栏颜色, 则直接重写<code>preferredStatusBarStyle</code>方法即可</li></ol><p><strong>备注</strong>        </p><ol><li><code>UIApplication.shared.setStatusBarStyle(.default, animated: true)</code>方法已过期, 不建议使用, 因此<code>UIViewControllerBasedStatusBarAppearance=false</code>也是不被推荐    </li><li>UIViewControllerBasedStatusBarAppearance默认为true, 所以在info.plist中不需要添加该配置        </li><li>总而言之: 忽略UIViewControllerBasedStatusBarAppearance, 使用<code>childViewControllerForStatusBarStyle</code>和<code>preferredStatusBarStyle</code>来管理状态栏颜色.</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考:        "></a>参考:        </h2><p><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621433-childviewcontrollerforstatusbars" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/uiviewcontroller/1621433-childviewcontrollerforstatusbars</a>        </p><p><a href="http://www.jianshu.com/p/0d4337b2e18a" target="_blank" rel="noopener">http://www.jianshu.com/p/0d4337b2e18a</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> UIViewControllerBasedStatusBarAppearance </tag>
            
            <tag> childViewControllerForStatusBarStyle </tag>
            
            <tag> 状态栏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>重构代码疑问之 as? as as!</title>
      <link href="/blog/2017/04/24/2017-4-24-Swift_usage1/"/>
      <content type="html"><![CDATA[<p>重构代码疑问之<b>as? as as!</b>    </p><ol><li>as 使用场景                </li><li>as! 使用场景        </li><li>as?        </li><li>as? XXX 和 as! XXX?的区别                <a id="more"></a>    </li></ol><h4 id="1-as使用场景"><a href="#1-as使用场景" class="headerlink" title="1.as使用场景:"></a>1.as使用场景:</h4><p>1). 向上转型    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Animal &#123;&#125;</span><br><span class="line">class Cat : Animal &#123;&#125;</span><br><span class="line">let cat = Cat()</span><br><span class="line">let animal = cat as Animal</span><br></pre></td></tr></table></figure><p>2). 消除二义性, 数值类型转换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let num1 = 42 as CGFloat</span><br><span class="line">let num2 = 42 as Int</span><br><span class="line">let num3 = 42.5 as Int</span><br><span class="line">let num4 = (42 / 2) as Double</span><br></pre></td></tr></table></figure></p><p>3). switch语句中进行模式匹配<br>如果不知道一个对象是什么类型, 可以通过Switch语句来检测类型并进行相关处理.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Animal &#123;&#125;</span><br><span class="line">class Cat: Animal &#123;&#125;</span><br><span class="line">class Dog: Animal &#123;&#125; </span><br><span class="line">let animal = Cat()</span><br><span class="line">switch animal &#123;</span><br><span class="line">case let cat as Cat:</span><br><span class="line">    print(&quot;cat class&quot;)</span><br><span class="line">case let dog as Dog:</span><br><span class="line">    print(&quot;dog class&quot;)</span><br><span class="line">default:</span><br><span class="line">    print(&quot;&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-as-使用场景"><a href="#2-as-使用场景" class="headerlink" title="2. as!使用场景"></a>2. as!使用场景</h4><p>向下转型(Downcasting), 转换失败报runtime error<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let ani2: Animal = Cat()</span><br><span class="line">let cat = ani2 as! Cat</span><br></pre></td></tr></table></figure></p><h4 id="3-as"><a href="#3-as" class="headerlink" title="3.as?"></a>3.as?</h4><p>同as!,但转换失败返回nil, 成功返回Optinal对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if let cat = animal as? Cat &#123;</span><br><span class="line">    // cat is not nil</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // cat is nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4-as-XXX-和-as-XXX"><a href="#4-as-XXX-和-as-XXX" class="headerlink" title="4. as? XXX 和 as! XXX?"></a>4. as? XXX 和 as! XXX?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let dict = NSDictionary()</span><br><span class="line">guard let swiftDict = dict as? [String:Any] else &#123; return &#125;</span><br><span class="line">    </span><br><span class="line">if let tmp = swiftDict[&quot;key&quot;] as? String &#123;</span><br><span class="line">    print(&quot;\(tmp) is a string&quot;)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">if let tmp = swiftDict[&quot;key&quot;] as! String? &#123;</span><br><span class="line">    print(&quot;\(tmp) is a string&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 编译不能通过, 因为无法确定swiftDict[&quot;key&quot;] 向 String转是否是向上转型</span><br><span class="line">/*if let tmp = swiftDict[&quot;key&quot;] as String? &#123;</span><br><span class="line">    print(&quot;\(tmp) is a string&quot;)</span><br><span class="line">&#125;*/</span><br></pre></td></tr></table></figure><p>两者区别在于 <code>as? String</code>会更安全, 当发现<code>tmp</code>不是<code>String</code>时返回<code>nil</code>, 否则返回一个<code>Optinal&lt;String&gt;</code><br>但是 <code>as! String?</code> 当 <code>tmp</code>不是一个<code>&lt;Optinal&gt;String</code>时会运行时崩溃, 因为它使用了<code>as!</code>将<code>swiftDict[&quot;key&quot;]</code>强制解包为一个<code>&lt;Optional&gt;String</code>, 但实际对象不为<code>Optional&lt;String&gt;</code>, 示例如下:                </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let dict = NSMutableDictionary()</span><br><span class="line">dict.setValue(NSNumber(value:1), forKey: &quot;key&quot;)</span><br><span class="line"></span><br><span class="line">guard let swiftDict = dict as? [String:Any] else &#123; return &#125;</span><br><span class="line">    </span><br><span class="line">if let tmp = swiftDict[&quot;key&quot;] as! String? &#123;</span><br><span class="line">    print(&quot;\(tmp) is a string&quot;)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">// Error: Could not cast value of type &apos;__NSCFNumber&apos; (0x1017f3590) to &apos;NSString&apos; (0x100dffc60).</span><br><span class="line">if let tmp = swiftDict[&quot;key&quot;] as! String? &#123;</span><br><span class="line">    print(&quot;\(tmp) is a string&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考网站:<br><a href="http://www.hangge.com/blog/cache/detail_1089.html" target="_blank" rel="noopener">Swift - as、as!、as?三种类型转换操作符使用详解（附样例）</a></p>]]></content>
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> as </tag>
            
            <tag> as? </tag>
            
            <tag> as! </tag>
            
            <tag> Optional </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>resizableImage的疑问</title>
      <link href="/blog/2017/03/22/2017-01-21-resizableImage/"/>
      <content type="html"><![CDATA[<p>resizableImage拉伸图片时以下两种情况具体怎么处理的?    </p><ol><li>边缘怎么拉伸的        </li><li>中间怎么填充的        <a id="more"></a></li></ol><blockquote><p>今日在跟踪一个问题的时候看到了这个方法, 想了下图片是怎么填充的, 然后记得中间的规则, 然后发现对四边的规则有些懵, 于是就写了个demo来尝试下</p></blockquote><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍:"></a>介绍:</h4><ol><li>原图(资源见尾部): 100*100     </li><li>中间方框:30 * 30</li><li>理论上下左右35, 但是实际是上36, 底部34</li></ol><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法:"></a>使用方法:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.imgView.image = UIImage(named: &quot;WechatIMG1&quot;)?.resizableImage(withCapInsets:UIEdgeInsetsMake(36.5, 35, 34.5, 35))</span><br></pre></td></tr></table></figure><h4 id="结论"><a href="#结论" class="headerlink" title="结论:"></a>结论:</h4><p>如图1所示, 虽然传的参数是个inset, 但是实际上它如图3 所示整个图切成了9分, 1,3,7,9固定不变, 2\8水平填充,4\6垂直填充, 5中间填充</p><p><strong>Q</strong>: 水平怎么拉伸的?<br><strong>A</strong>: 原图inset取出四角后四边剩余部分做成萝卜章, 水平\垂直看到空白就盖(<em>填充区域内有效</em>)</p><p><strong>Q</strong>: 中间怎么填充的<br><strong>A</strong>: 将原图inset中间部分取出做成萝卜章, 然后看到空白就盖萝卜章(<em>填充区域内有效</em>)</p><p><strong>脑洞</strong>: 如果ImageView比图片还小会怎样呢?<br><strong>A</strong>: 如图2所示, 中间会显示很小, 四角会有覆盖的情况</p><h4 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢:"></a>鸣谢:</h4><p>感谢木木鱼提供的图片</p><h4 id="图片资源"><a href="#图片资源" class="headerlink" title="图片资源:"></a>图片资源:</h4><p>原图:<br><img src="/assets/resizableImage1.png" alt="原图"></p><p>图1<br><img src="/assets/resizableImage2.png" alt="大拉伸图"> </p><p>图2<br><img src="/assets/resizableImage3.png" alt="缩小图"> </p><p>图3<br><img src="/assets/resizableImage4.png" alt="缩小图"></p>]]></content>
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UIImage </tag>
            
            <tag> resizableImage的疑问 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Http权威指南读书笔记II</title>
      <link href="/blog/2017/01/22/Http%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0II/"/>
      <content type="html"><![CDATA[<p><strong>Cookie&amp;Set-Cookie</strong><br><a id="more"></a></p><p>为什么要有Cookie, </p><p>HTTP最初是一个匿名、无状态的请求/响应协议。</p><p>Cookie是个很有趣的设计，回到互联网设计之初，只有那么几台机，就像小山村里一样，大家都互相认识，根本不需要什么标识符，后来小山村发展了，涌入了很多外来人，</p><p>HTTP的迅速源于它的无状态，他不像TCP一样，在断开之前要一直连着，而是请求完毕就断开了</p><p>Q: Cookie从哪里来的?<br>A: Cookie是服务器返回的</p><p>Q: </p>]]></content>
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2017 </tag>
            
            <tag> HTTP </tag>
            
            <tag> HTTPS </tag>
            
            <tag> 计算机 </tag>
            
            <tag> 网络 </tag>
            
            <tag> Cookie </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP权威指南读书笔记I</title>
      <link href="/blog/2017/01/21/2017-01-21-https1/"/>
      <content type="html"><![CDATA[<ol><li>Scheme介绍</li><li>请求方法</li><li>状态码</li><li>名词解释        <a id="more"></a>    </li></ol><h3 id="Scheme-方案（差点老花眼看成schema了）"><a href="#Scheme-方案（差点老花眼看成schema了）" class="headerlink" title="Scheme:方案（差点老花眼看成schema了）"></a>Scheme:方案（<em>差点老花眼看成schema了</em>）</h3><ul><li><strong>http</strong>: 默认端口80 <code>http://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;?&lt;query&gt;#&lt;frag&gt;</code>    </li><li><strong>https</strong>: 安全的http 默认端口443 <code>https://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;?&lt;query&gt;#&lt;frag&gt;</code>    </li><li><strong>mailto</strong>: <code>mailto:antwork@126.com</code>    </li><li><strong>ftp</strong>: 文件传输协议URL可以用来上传下载，并获取FTP服务器上的目录结构内容的列表 <code>ftp://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;;&lt;params&gt;</code>    </li><li><strong>rtsp</strong>, <strong>rtspu</strong>(u代表udp): Real Time Streaming Protocol:实时流传输协议 <code>rtsp://www.baidu.com:554/abc/video</code></li><li><strong>file</strong>: 主机上可直接访问的文件 <code>file://&lt;host&gt;/&lt;path&gt;</code></li><li><strong>news</strong>: 一些特定的文章或新闻组 <code>news:rec.arts.startrek</code></li><li><strong>telnet</strong>: 访问交互式业务。通过telnet协议访问的交互式应用程序（资源）<code>telnet://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/</code></li></ul><h3 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法:"></a>HTTP方法:</h3><ol><li><p><strong>GET</strong>        从服务器向客户端发送命名资源，应该安全使用的方法，多次调用不影响资源    </p></li><li><p><strong>PUT</strong>        将客户端的数据存储到一个命名的服务器        </p></li><li><strong>POST</strong>      将客户端数据发送到一个服务器网关应用程序    </li><li><strong>DELETE</strong>   从服务器中删除命名资源    </li><li><strong>HEAD</strong>       仅发送命名资源响应中的HTTP首部<br> <em>只返回首部的Get方法。用途：1.了解资源情况；2.确定对象的存在；3.检查是否被修改</em>        </li><li><strong>TRACE</strong>        主要用于诊断，用于查看代理和其他应用程序对用户请求所产生效果。但是它依赖于中间件的处理，不是特别可靠。    </li><li><strong>OPTION</strong> 请求服务器告知其支持的各种功能， 比如返回Allow: GET, POST, PUT, OPTIONS    </li><li><strong>DELETE</strong> 请求服务器删除某资源，但是服务器可能在不通知客户端的情况下撤销请求，所以不是很可靠</li></ol><blockquote><p>POST与PUT比较类似，都可以用来创建和更新资源，真实区别在于幂等性，简单来说，幂等的话调用多次和调用一次的副作用是一样的，POST不是幂等的，多次调用会创建多个新数据，而PUT应该是幂等的。其实具体怎么用都是使用者自己来决定，但是HTTP给到的规范，实施者还是应该根据两者区别正确使用，具体说明见参考链接。</p></blockquote><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><table><thead><tr><th>整体范围</th><th>已定义范围</th><th>分类</th></tr></thead><tbody><tr><td>100~199</td><td>100~101</td><td>信息提示</td></tr><tr><td>200~299</td><td>200~206</td><td>成功</td></tr><tr><td>300~399</td><td>300~305</td><td>重定向</td></tr><tr><td>400~499</td><td>400~415</td><td>客户端错误</td></tr><tr><td>500~599</td><td>500~505</td><td>服务器错误</td></tr></tbody></table><h4 id="常见状态码："><a href="#常见状态码：" class="headerlink" title="常见状态码："></a>常见状态码：</h4><p>200 成功<br>301 在请求资源被移走时使用，头部的Location字段包含现有资源位置<br>302 与301类似，区别在于301是永久迁移，301是临时定位，将来还会用回老的url<br>401 未授权<br>404 没找到资源<br>500 后台错误    </p><h3 id="名词解释："><a href="#名词解释：" class="headerlink" title="名词解释："></a>名词解释：</h3><p><strong>URI</strong>: <em>Uniform Resources Identifier</em> 统一资源标识符；理论名词.  </p><ul><li><strong>URL</strong>: <em>Uniform Resources Location</em> 统一资源定位符；是URI的一种表现形式，URI子集  </li><li><strong>URN</strong>: <em>Uniform Resources Name</em> 统一资源名； 与资源无关，资源可以四处搬移，URI子集，试验阶段。  </li></ul><p><strong>MIME</strong>: <em>Multipurpose Internet Mail Extension</em> 多用途因特网邮件扩展，这个有点逗，原来用在接收多类型邮件，直接用在了HTTP了。</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>幂等性：<a href="http://www.cnblogs.com/weidagang2046/archive/2011/06/04/idempotence.html" target="_blank" rel="noopener">http://www.cnblogs.com/weidagang2046/archive/2011/06/04/idempotence.html</a>    </p>]]></content>
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2017 </tag>
            
            <tag> HTTP </tag>
            
            <tag> HTTPS </tag>
            
            <tag> 计算机 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello 2017</title>
      <link href="/blog/2017/01/21/Hello-2017/"/>
      <content type="html"><![CDATA[<p>2017年的几个小目标</p><ol><li>当爸爸</li><li>坚持每周跑步三次</li><li>写更多的Blog, 反思, 分享<br><a id="more"></a>:    </li></ol><p><b>[写作]:</b>最近一直在做总结, 回想2016年我都做了什么, 对比下其他进步飞速的童鞋, 感觉自己进步颇少, 管理经验并没有增加很多, 编程方面也没有更加精进, 唯一的记忆就是在不断的写代码, 不断地发版, 不断地重构, 虽然做了很多的事, 但是总结的少了, 无法跳出来看自己, 日子也就浑浑噩噩的过去了. 希望2017年我能够有更多总结性的文字, 可以沉淀下我的想法, 加深思考的深度, 而不是回头时又一次发现自己还在很浅的地方兜圈转悠.</p><p><b>[责任]:</b>奔三了, 我已不是那个稚嫩的骚年, 也没法一直做那个稚嫩的骚年了, 我希望有更多的当担, 能够为老婆, 为家庭分担更多, 也要努力让自己成长成一个大树, 为家遮风挡雨.</p><p><b>[运动]:</b>跑步一直是个想法, 想了好多年了, 最近才开始实施, 因为感觉自己身体真是大不如前了, 就像湍急河流中的🐟, 如果不奋力的游, 就只能让自己一步步成为一个胖子. 不想被别人改变, 就努力改变自己. 向着更健康的生活迈进!!!</p><p>2017年, 要过更有品质的生活!!!</p><hr><p>今天将老博客迁移了下， 从Jekyll换成了<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>, 主题使用了<a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">maupassant</a>.</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2017 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQLAlchemy学习备份</title>
      <link href="/blog/2015/05/06/2015-05-06-sqlalchemy-study/"/>
      <content type="html"><![CDATA[<p>参考资料来源:<br><a href="http://docs.sqlalchemy.org/en/rel_1_0/orm/tutorial.html" target="_blank" rel="noopener">http://docs.sqlalchemy.org/en/rel_1_0/orm/tutorial.html</a></p><p>case1:<br>查询数据库中某些字段</p><p>session.query(User.name, User.fullname)</p><p>case2:<br>更换数据库返回的key<br>for row in session.query(User.name.label(‘name_label’)).all();<br>    print(row.name_label)</p><p>case3:<br>偏移<br>for u in session.query(User).order_by(User.id)[1:3]:<br>    print u</p><p>意思为limit2 offset 1,即偏移1位,取2个值</p><p>case4:<br>filter_by(),使用关键词为key<br>    session.query(User.name).fitler_by(fullname=”Ed jone”) #这里是单等号</p><p>fitler()<br>    session.query(User.name).filter(User.fullname==”Ed jone”) #这里是双等号</p><p>多重filter意味着条件与AND<br>    session.query(User.name).filter(User.name==”Ed jone”).\<br>                             filter(User.fullname==”abc”)</p><p>条件判断<br>等:<br>    query.filter(User.name == ‘ed’)</p><p>不等:<br>    query.filter(User.name != ‘ed’)</p><p>like:<br>    query.filter(User.name.like(‘%ed%%’))</p><p>IN:<br>    query.filter(User.name.in_([‘ed’,’wendy’,’jack’]))</p><pre><code># 潜逃query.filter(User.name.in_(    session.query(User.name).filter(User.name.like(&apos;%ed%&apos;))    ))</code></pre><p>NOT IN:<br>    query.filter(~User.name.in_([‘ed’,’ab’]))</p><p>IS Null:<br>    query.filter(User.name == None)</p><p>IS NOT NULL:<br>    query.filter(User.name != None)</p><p>AND:</p><pre><code>#方法1 使用and_from sqlalchemy import and_query.filter(and_(User.name==&apos;ed&apos;, User.fullname==&apos;ab&apos;))#方法2 使用多表达式query.filter(User.name == &apos;ed&apos;, User.fullname==&apos;bc&apos;)#方法3 串表达式query.filter(User.name==&apos;ed&apos;).fiter(User.fullname==&apos;bc&apos;)</code></pre><p>OR:<br>    from sqlachemy import or_<br>    query.filter(or_(User.name==’ed’, User.name==’wendy’))</p><p>MATCH:<br>    query.filter(User.name.match(‘wendy’))</p><p>使用字面sql</p><pre><code># 使用局部的sql条件from sqlalchemy import textfrom user in session.query(User).\            filter(text(&quot;id&lt;224&quot;)).\            order_by(text(&quot;id&quot;)).all():    print user.name关联参数,可以使用params()方法session.query(User).filter(text(&quot;id&lt;:value and name=:name&quot;)).\        params(value=224, name=&apos;fred&apos;).order_by(User.id).one()全string的sql语句查询session.query(User).from_statement(        text(&quot;SELECT * FROM users where name=:name&quot;)).\        params(name=&apos;ed&apos;).all()</code></pre><p>计数:<br>    session.query(User).filter(User.name.like(‘%ed’)).count()</p><p>数据库关系:<br>one to many:<br>    在子表中添加foreignkey, 在父表中添加关系</p><pre><code>class Parent(Base):    __tablename__ = &apos;parent&apos;    id = Column(Integer, primary_key=True)    children = relationship(&apos;Child&apos;)class Child(Base):    __tablename__ = &apos;child&apos;    id = Column(Integer, primary_key=True)    parent_id = Column(Integer, ForeignKey(&apos;parent.id&apos;))# 双向关系 bidirectional relationship 使用backref选项class Parent(Base):    __tablename__ = &apos;parent&apos;    id = Column(Integer, primary_key=True)    children = relationship(&quot;Child&quot;, backref=&quot;parent&quot;)class Child(Base):    __tablename = &apos;child&apos;    id = Column(Integer, primary_key=True)    parent_id = Column(Integer, ForeignKey(&apos;parent.id&apos;))</code></pre><p>Many to one:<br>    class Parent(Base):<br>        <strong>tablename</strong> = ‘parent’<br>        id = Column(Integer, primary_key = True)<br>        child_id = Column(Integer, ForeignKey(‘child.id’))<br>        child = relationship(‘Child’, backref=”parents”)</p><pre><code>class Child(Base):    __tablename__ = &apos;child&apos;    id = Column(Integer, primary_key=True)</code></pre><p>One to one:<br>    方式一:<br>    class Parent(Base):<br>        <strong>talbename</strong> = ‘parent’<br>        id = Column(Integer, primary_key=True)<br>        child = relationship(‘Child’, uselist=False, backref=’parent’)</p><pre><code>class Child(Base):    __tablename__ = &apos;child&apos;    id = Column(Integer, primary_key=True)    parent_id = Column(Integer, ForeignKey(&apos;parent.id&apos;))方式二: class Parent(Base):    __tablename__ = &apos;parent&apos;    id = Column(Integer, primary_key=True)    child_id = Column(Integer, ForeignKey(&apos;child.id&apos;))    child = relationship(&quot;Child&quot;, backref=backref(&quot;parent&quot;, uselist=False))class Child(Base):        __tablename__ = &apos;child&apos;        id = Column(Integer, primary_key=True)</code></pre><p>Many-to-many:<br>    association_table = Table(‘association’, Base.metadata,<br>        Column(‘left_id’, Integer, ForeignKey(‘left.id’)),<br>        Column(‘right_id’, Integer, ForeignKey(‘right.id’))<br>    )</p><pre><code>class Parent(Base):    __tablename__ = &apos;left&apos;    id = Column(Integer, primary_key=True)    children = relationship(&apos;Child&apos;, secondary =association_table)class Child(Base):    __tablename__ = &apos;right&apos;    id = Column(Integer, primary_key=True)# 双向关系association_table = Table(&apos;association&apos;, Base.metadata,    Column(&apos;left_id&apos;, Integer, ForeignKey(&apos;left.id&apos;)),    Column(&apos;right_id&apos;, Integer, ForeignKey(&apos;right.id&apos;)))class Parent(Base):    __tablename__ = &apos;left&apos;    id = Column(Integer, primary_key=True)    children = relationship(&quot;Child&quot;,                    secondary=association_table,                    backref=&quot;parents&quot;)class Child(Base):    __tablename__ = &apos;right&apos;    id = Column(Integer, primary_key=True)</code></pre><p>Bind parameters can be specified with string-based SQL, using a colon. To specify the values, use the params() method:<br>    &gt;&gt;&gt; session.query(User).filter(text(“id&lt;:value and name=:name”)).\<br>    …     params(value=224, name=’fred’).order_by(User.id).one() </p>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask, sqlalchemy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git神图</title>
      <link href="/blog/2015/05/06/2015-05-06-git/"/>
      <content type="html"><![CDATA[<p>一张git神图， 讲述基本的git操作<br><a id="more"></a></p><p><a href="/assets/37923f2478edc5709b36562b26c9e008.png"><img src="/assets/37923f2478edc5709b36562b26c9e008.png" alt=""></a> </p>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sqlite3的使用1-操作</title>
      <link href="/blog/2015/04/28/2015-04-28-sqlite-query/"/>
      <content type="html"><![CDATA[<p>sqlite3的基本用法<br><a id="more"></a></p><h3 id="sqlite3的操作"><a href="#sqlite3的操作" class="headerlink" title="sqlite3的操作"></a>sqlite3的操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line">select id from foods where name=&apos;jujyfruit&apos;</span><br><span class="line">| 动词 | 主语        | 谓语                 |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">创建表</span><br><span class="line">--------------------------------------------</span><br><span class="line">==语法==</span><br><span class="line">create [temp|tempname] table table_name (column_definitions [, constraints]);</span><br><span class="line"></span><br><span class="line">==说明==</span><br><span class="line">使用temp或temporay关键字声明的表是临时表,这种表是临时的-只存活于当前对话,一旦连接断开,就会被自动销毁</span><br><span class="line"></span><br><span class="line">==示例==</span><br><span class="line">create table contacts (id integer, primary key, </span><br><span class="line">name text not null collate nocase,</span><br><span class="line">phone text not null default &apos;UNKNOWN&apos;,</span><br><span class="line">unique (name, phone));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">修改表</span><br><span class="line">-------------------------------------------</span><br><span class="line">==语法==</span><br><span class="line">alter table table_name &#123; rename to name | add column column_def &#125;</span><br><span class="line"></span><br><span class="line">==说明==</span><br><span class="line">花括号表示选择其中一项,实际使用不需要花括号,即要么重命名,要么添加</span><br><span class="line"></span><br><span class="line">==示例==</span><br><span class="line">sqlite&gt; alter table contacts</span><br><span class="line">add column email text not null default &apos;&apos; collate nocase;</span><br><span class="line">sqlte&gt; .schema contacts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select</span><br><span class="line">-------------------------------------------</span><br><span class="line"></span><br><span class="line">选择操作(一种关系)的输出可以是另一个select语句的输入,如:</span><br><span class="line">select name from (select name, type_id from (select * from foods));</span><br><span class="line">里层的结果作为次层的输入</span><br><span class="line"></span><br><span class="line">sql命令的通用形式如下:</span><br><span class="line"></span><br><span class="line">select [distinct] heading</span><br><span class="line">from tables</span><br><span class="line">group by columns</span><br><span class="line">having predicate</span><br><span class="line">order by columns</span><br><span class="line">limit count, offset;</span><br><span class="line"></span><br><span class="line">常用形式:</span><br><span class="line">select heading from tables where predicate;</span><br><span class="line"></span><br><span class="line">示例1:</span><br><span class="line">sqlite&gt; select id, name from food_types;</span><br><span class="line"></span><br><span class="line">示例2:</span><br><span class="line">sqlite&gt; select * from dogs where color=&apos;purple&apos; and grin = &apos;toothy&apos;;</span><br><span class="line"></span><br><span class="line">操作符,包括*+- == != IN AND or等</span><br><span class="line">操作符使用一个或多个输入并产生一个新值作为输出, 只所以叫&apos;操作符&apos;,是因为它完成某种操作并产生结果.</span><br><span class="line">eg:</span><br><span class="line">x = count(episodes.name) </span><br><span class="line">sqlite&gt; select * from foods where name=&apos;july&apos; and type_id=9;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LIKE</span><br><span class="line">sqlite&gt; select id, name from foods where name like &apos;J%&apos;;</span><br><span class="line"></span><br><span class="line">上例中表示匹配以J开头的食品</span><br><span class="line">模式中的百分号(%)相当于正则中的*,表示0个或多个字符匹配</span><br><span class="line">下划线(_)可与任意单个字符匹配,相当于正则中的+</span><br><span class="line">sqlite&gt; select id, name from foods where name like &apos;%ac%p%&apos;;</span><br><span class="line">通过将%放入左边或右边来进行匹配</span><br><span class="line"></span><br><span class="line">NOT</span><br><span class="line">sqlite&gt; select id, name from foods where name like &apos;%ac%p%&apos; and name not like &apos;%Sch%&apos;;</span><br><span class="line"></span><br><span class="line">GLOB</span><br><span class="line">同like,不过匹配是大小写敏感,并且使用&apos;*&apos;来匹配0到多个,&apos;?&apos;匹配单一字符</span><br><span class="line"></span><br><span class="line">限定和排序</span><br><span class="line"></span><br><span class="line">sqlite&gt; select * from food_types order by id limit 1 offset 1;</span><br><span class="line">sqlite&gt; select * from foods where name like &apos;B%&apos; order by type_id desc, name limit 10;</span><br><span class="line"></span><br><span class="line">sqlite&gt; select * from foods where name like &apos;B%&apos; order by type_id desc, name limit 1 offset 2;</span><br><span class="line">等于下列,使用缩写时,offset总是优先于limit,不过个人感觉还是不要写缩写</span><br><span class="line">sqlite&gt; select * from foods where name like &apos;B%&apos; order by type_id desc, name limit 2, 1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">limit:限制结果集大小</span><br><span class="line">offset:限制结果集范围</span><br><span class="line">注意:limit/offset不会加速查询</span><br><span class="line"></span><br><span class="line">Function和聚合</span><br><span class="line">upper(), lower(), abs(), count()</span><br><span class="line"></span><br><span class="line">sqlite&gt; select id, upper(name), length(name) from foods where type_id =1 limit 10</span><br><span class="line"></span><br><span class="line">结果</span><br><span class="line">id  upper(name) length(name)</span><br><span class="line">--  ----------  ------------</span><br><span class="line">1   BAGELS      6</span><br><span class="line">2   BAGELS, RAI 14</span><br><span class="line"></span><br><span class="line">函数可以是任意表达式的一部分,所以函数也可以用在WHERE子句中:</span><br><span class="line">sqlite&gt; select id, upper(name), length(name) from foods where length(name) &lt; 5 limit 5;</span><br><span class="line"></span><br><span class="line">聚合是一类特殊的函数,它从一组记录中计算聚合值,标准的聚合函数包括sum(), avg(), count(), min(), max(),</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line">sqlite&gt; select count(*) from foods where type_id = 1;</span><br><span class="line">count()返回关系中所有行的数目</span><br><span class="line"></span><br><span class="line">sqlite&gt; select avg(length(name)) from foods;</span><br><span class="line"></span><br><span class="line">分组:</span><br><span class="line">聚合的主要部分就是分组,聚合不只是能够将计算整个结果集的聚合值,黑啊可以吧结果分为多个组,然后计算每个组的聚合值</span><br><span class="line">sqlite&gt; select type_id from foods group by type_id;</span><br><span class="line">group by查询到结果,然后将结果分为共享某个字段上同等值的小组,这些组再传递给select子句.</span><br><span class="line"></span><br><span class="line">sqlite&gt; select type_id, count(*) from foods group by type_id;</span><br><span class="line">type_id count(*)</span><br><span class="line">------- -------</span><br><span class="line">1       47</span><br><span class="line">2       15</span><br><span class="line"></span><br><span class="line">group by 使用类似的值创建分组,但是没有在select子句处理前过滤这些组,having具备这以功能, having 是一个可以应用到group by的断言,having的断言是针对聚合值的</span><br><span class="line">sqlite&gt; select type_id, count(*) from foods group by type_id having count(*) &lt; 20;</span><br><span class="line"></span><br><span class="line">去重复:</span><br><span class="line">distinct</span><br><span class="line">sqlite&gt; select distinct type_id from foods</span><br><span class="line"></span><br><span class="line">多表连接join:</span><br><span class="line">连接是多表数据工作的关键,它是select命令的第一个操作,连接操作的结果作为输入,供select语句的其他部分(过滤)处理.</span><br><span class="line"></span><br><span class="line">sqlite&gt; select foods.name food_types.name from foods, food_types where foods.type_id=food_types.id limit 10</span><br><span class="line"></span><br><span class="line">备注:</span><br><span class="line">使用table_name.column_name的方式,区分哪个字段是那个表的</span><br><span class="line"></span><br><span class="line">内连接(求交集):</span><br><span class="line">sqlite&gt; select * from foods inner join food_types on foods.id == food_types.id;</span><br><span class="line"></span><br><span class="line">左外连接:</span><br><span class="line">sqlite&gt; select * from foods left outer join foods_episodes on foods.id= foods.episodes.food_id;</span><br><span class="line"></span><br><span class="line">举例:</span><br><span class="line">有张表是会员表(左表),有张表是状态表,左连接会员表查询所有会员的状态是吧</span><br><span class="line">如果会员状态不存在就Null,否则将右表的会员状态加到左表结果去</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">名称和别名:</span><br><span class="line">select foods.name, food_types.name from foods, food_types where foods.type_id = food_types.id limit 10;</span><br><span class="line"></span><br><span class="line">等于</span><br><span class="line"></span><br><span class="line">select f.name, t.name from foods f, food_types t where f.type_id = t.id limit 10</span><br><span class="line"></span><br><span class="line">=说明=</span><br><span class="line">foods表取别名f, food_types取别名t,方便某些表明比较长时重复输入长表名</span><br><span class="line"></span><br><span class="line">sqlite&gt; select f.name as food, e1.name e1.session.e2.anme, e2.season </span><br><span class="line">        from episodes e1, foods_episoeds f1, foods f, epsiondes e2, </span><br><span class="line">        foods_episodes fe2</span><br><span class="line">        where </span><br><span class="line">        -- Get foods in season 4</span><br><span class="line">        (e1.id = fe1.epsode_id and e1.season = 4) and fe1.food_id = f.id</span><br><span class="line">        -- link foods with all other episodes</span><br><span class="line">        and (fe1.food_id = fe2.food_id)</span><br><span class="line">        -- link with their respective episodes and filter out e1&apos;s season</span><br><span class="line">        and (fe2.episode_id = e2.id and e2.season ! = e1.season)</span><br><span class="line">        oreder by f.name</span><br><span class="line">        </span><br><span class="line"> food      name        season    name      season</span><br><span class="line"> Bool      The Shoes   4         The abc   1</span><br><span class="line"> </span><br><span class="line"> =说明=</span><br><span class="line"> as关键词是可选的,但倾向保留,不容易混淆</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">子查询:</span><br><span class="line">IN 操作符是一个双目操作,输入一个值和一列值,如果输入的单值存在与列值中,返回真,否则返回假</span><br><span class="line">sqlite&gt; select 1 in (1, 2, 3)</span><br><span class="line">1</span><br><span class="line">sqlite&gt; select 2 in (3, 4, 5)</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">sqlite&gt; select count(*) from foods where type_id in (1, 2)</span><br><span class="line">可以写成这样</span><br><span class="line">sqlite&gt; select count(*) from foods where type_id in (select id from food_types where name=&apos;Ba&apos; or name =&apos;bc&apos;);</span><br><span class="line"> </span><br><span class="line">复合查询:</span><br><span class="line">* 涉及的关系字段数目必须相同</span><br><span class="line">* 只能有一个order by子句,并且处于复合查询的最末尾, 对联合结果进行排序</span><br><span class="line">* </span><br><span class="line">union:联合两个Select语句的结果,会消除重复,不消除采用union all</span><br><span class="line">intersect:求交集</span><br><span class="line">expect:求在a不在b的结果</span><br><span class="line"> </span><br><span class="line">null</span><br><span class="line">使用is null 或者 is not null来判断,不要使用== null,将什么都查不到</span><br></pre></td></tr></table></figure><p>###修改数据</p><ol><li>插入数据</li></ol><p>insert into table (column_list) values (value_list);;<br>变量table指明数据插入到哪个表中.变量column_list使用逗号分隔的字段名称,这些字段必须是表中存在的.变量value_list是用逗号分隔的值列表, 这些值与column_list的字段一一对应.<br>插入一行:<br>sqlite&gt; insert into foods (name, type_id) vlaues (‘cxxx’, 1);<br>sqlite&gt; insert into foods values(NULL, 1, ‘xxx)</p><p>sqlite可以使用last_insert_rowid()获取最后插入的rowid</p><ol><li>更新记录</li></ol><p>update table set update_list where predicate;<br>update_list 是一个或多个”字段赋值”的列表,字段赋值的格式为column_name=value,<br>sqlite&gt; update foods set name=’Cxx’ where name = ‘xxx’;</p><ol><li>删除记录</li></ol><p>delete from table where predicate;</p><p>delete from foods where name=’chonljl’;</p><p>###完整性</p><p>unique<br>primary key<br>not null<br>foreign key<br>check<br>collate<br>default</p><p>示例:<br>id integer primary key autoincreament<br>name text not null collate nocase  //大小写不敏感<br>create table times(id int, date not null default current_date,<br>time not null default current_time,<br>timestamp not null default current_timestamp);</p><p>current_date YYYY-MM-DD<br>current_time HH:MM:SS<br>current_timestamp YYYY-MM-DD HH:MM:SS</p><p>create table contact (id integer primary key, unique(name, phone), check(length(phone)&gt;=7));</p><p>所有字段的check约束都在修改发生前评估,要想 修改成功,所有约束的表达式必须判断为真.</p><p>外键约束:<br>create table table_name<br>(column_definition references foreign_table(column_name)<br>on {delete|update} integerity_action<br>[not] deferrable[intially {deferred|immediate}.]<br>-);</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">create table food_types (</span><br><span class="line">id integer primary key,</span><br><span class="line">name text</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table foods (</span><br><span class="line">id integer primary key,</span><br><span class="line">type_id integer,</span><br><span class="line">name text</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table foods (</span><br><span class="line">id integer primary key,</span><br><span class="line">type_id integer references food_types(id)</span><br><span class="line">on delete restrict</span><br><span class="line">deferrable initially deffered,</span><br><span class="line">name text</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">set null, 如果父值被删除或者不存在了, 剩余的子值改为null</span><br><span class="line">set default, 如果父值被删除或者不存在了,剩余的子值将修改为默认值</span><br><span class="line">cascade:更新父值时,更新所以u匹配的子值,删除父值时,删除所有的子值</span><br><span class="line">restrict:更新或删除父值可能会出现孤立的子值,从而阻止事务</span><br><span class="line">no action:不干涉执行,只是观察</span><br><span class="line"></span><br><span class="line">deferrable控制定义的约束是立即强制实施还是延迟到整个事务结束</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlite3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sqlite3的使用</title>
      <link href="/blog/2015/04/28/2015-04-28-sqlite3-base/"/>
      <content type="html"><![CDATA[<h3 id="sqlite3的使用"><a href="#sqlite3的使用" class="headerlink" title="sqlite3的使用"></a>sqlite3的使用</h3><p>创建数据库(调用该方法,如果数据库中不存在该数据并不会立即创建,直到数据库内部创建一些内容,如表或试图才会创建该数据库):    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sqlite3 test.db</span><br></pre></td></tr></table></figure><p>创建表:    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; create table test (id integer primary key, value text);</span><br></pre></td></tr></table></figure><p>插入数据(名为id的主键列,该列默认具备自动增长的属性,插入时不提供该列,sqlite会查找该列下一值后自动产生一个):    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; insert into test(id, value) values(1, &apos;eenie&apos;);</span><br><span class="line">sqlite&gt; insert into test(id, value) values(2, &apos;meenie&apos;);</span><br><span class="line">sqlite&gt; insert into test(value) values(&apos;min&apos;);</span><br><span class="line">sqlite&gt; insert into test(value) values(&apos;mo&apos;);</span><br></pre></td></tr></table></figure><p>修改输出配置并查询:     </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; .mode column</span><br><span class="line">sqlite&gt; .headers on</span><br><span class="line">sqlite&gt; select * from test;</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">id          value</span><br><span class="line">----------  ----------</span><br><span class="line">1           value1</span><br><span class="line">2           value2</span><br><span class="line">3           value3</span><br><span class="line">4           value4</span><br></pre></td></tr></table></figure><p>添加索引和视图    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; create index test_idx on test(value);</span><br><span class="line">sqlite&gt; create view schema as select * from sqlite_master;</span><br></pre></td></tr></table></figure><p>退出:    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; .exit</span><br></pre></td></tr></table></figure><p>获取数据库的Schema信息</p><p>获取所有的表和视图列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; .tables</span><br><span class="line"></span><br><span class="line">--------------</span><br><span class="line"></span><br><span class="line">schema test</span><br></pre></td></tr></table></figure></p><p>获取创建的表和试图schema    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; .indices test</span><br><span class="line"></span><br><span class="line">--------------------------------</span><br><span class="line"></span><br><span class="line">test_idx</span><br><span class="line"></span><br><span class="line">查看一个表的结或试图的定义语句(DDL)</span><br><span class="line">sqlite&gt; .schema test</span><br><span class="line"></span><br><span class="line">-------------------------------</span><br><span class="line"></span><br><span class="line">CREATE TABLE test (id integer primary key, value text);</span><br><span class="line">CREATE INDEX test_idx on test (value);</span><br><span class="line"></span><br><span class="line">不传table名称获取所有数据库队形(table, index, view, triger)的定义语句</span><br><span class="line">sqlite&gt; .schama</span><br><span class="line"></span><br><span class="line">-------------------------------</span><br><span class="line"></span><br><span class="line">CREATE TABLE test (id integer primary key, value text);</span><br><span class="line">CREATE VIEW schema as select *from sqlite_master;</span><br><span class="line">CREATE INDEX test_idx on test (value);</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">####导出数据</span><br><span class="line">(将整个数据库导出为数据库定义语言(DDL)和书库操作语言(DML)命令,适合重新创建数据库对象和其中的数据库,默认输出到屏幕,使用.dump[filename]命令,将所有输出重定向到指定的文件中, 若要恢复输出到屏幕,只需要执行.out stdout):</span><br></pre></td></tr></table></figure><p>sqlite&gt; .output file.sql<br>sqlite&gt; .dump<br>sqlite&gt; .output stdout</p><hr><p>file.sql内容:</p><p>PRAGMA foreign_keys=OFF;<br>BEGIN TRANSACTION;<br>CREATE TABLE test (id integer primary key, value text);<br>INSERT INTO “test” VALUES(1,’value1’);<br>INSERT INTO “test” VALUES(2,’value2’);<br>INSERT INTO “test” VALUES(3,’value3’);<br>INSERT INTO “test” VALUES(4,’value4’);<br>CREATE INDEX test_idx on test (value);<br>CREATE VIEW schema as select *from sqlite_master;<br>COMMIT;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">###导入数据</span><br><span class="line">1. 文件由sql语句构成, 可以使用.read命令导入(执行)文件中包含的命令</span><br><span class="line">2. 文件包括由逗号或者其他分隔符组成,可使用.import[file][table]命令</span><br><span class="line">查询当前默认的分隔符</span><br></pre></td></tr></table></figure><pre><code>echo: off</code></pre><p>  explain: off<br>  headers: off<br>     mode: list<br>nullvalue: “”<br>   output: stdout<br>separator: “|”<br>    stats: off<br>    width:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>sqlite&gt; drop table test;<br>sqlite&gt; drop view schema;<br>sqlite&gt; .read file.sql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 备份数据库</span><br></pre></td></tr></table></figure></p><p>slqite3 test.db .dump &gt; test.sql</p><p>sqlite3 test.db &lt; test.sql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 注意</span><br><span class="line"></span><br><span class="line">1. sqlite中默认的字符常量值是大小写敏感的,因此&apos;Mike&apos;与&apos;mike&apos;是不同的</span><br><span class="line">2. sql不区分关键词和标识符的大小写,详见注意2示例</span><br><span class="line">3. sqlite支持以单引号或双引号界定字符串,但是建议只使用单引号,对于已存在单引号,采用连续两个单引号,如 Kenny&apos;s chicken 要改成 &apos;Kenny&apos;&apos;s chicken&apos;</span><br><span class="line">4. 单行注释采用两个连续连字符&apos;--&apos;</span><br><span class="line">5. 多行注释采用 /* */</span><br><span class="line"></span><br><span class="line">注意2示例:</span><br></pre></td></tr></table></figure></p><p>下列语句具有相同效果<br>SELECT <em> from foo;<br>seleCt </em> frOm FOO;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?? 1. 数据库中的类型</span><br><span class="line"></span><br><span class="line">*.mode column效果展示:* 用列分隔数据</span><br></pre></td></tr></table></figure></p><p>0||Good News Bad News<br>1|1|Male Unbonding<br>2|1|The Stake Out<br>3|1|The Robbery<br>…</p><p>sqlite&gt; .mode column<br>0                       Good News Bad News<br>1           1           Male Unbonding<br>2           1           The Stake Out<br>3           1           The Robbery</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*.header on* 带标题</span><br></pre></td></tr></table></figure><p>0||Good News Bad News</p><p>之后:</p><p>id          season      name</p><hr><p>0                       Good News Bad News</p><p><code>`</code></p>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlite3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用网址备份</title>
      <link href="/blog/2015/04/28/2015-04-28-mark-webs/"/>
      <content type="html"><![CDATA[<h3 id="怎么在已添加的git版本管理的项目中更新ignore文件"><a href="#怎么在已添加的git版本管理的项目中更新ignore文件" class="headerlink" title="怎么在已添加的git版本管理的项目中更新ignore文件"></a>怎么在已添加的git版本管理的项目中更新ignore文件</h3><pre><code>Remove existing files from the repository:find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatchAdd the line.DS_Storeto the file .gitignore, which can be found at the top level of your repository (or created if it isn&apos;t there already). Thengit add .gitignoregit commit -m &apos;.DS_Store banished!&apos;</code></pre><p>原网址:<br><a href="http://stackoverflow.com/questions/107701/how-can-i-remove-ds-store-files-from-a-git-repository" target="_blank" rel="noopener">http://stackoverflow.com/questions/107701/how-can-i-remove-ds-store-files-from-a-git-repository</a></p>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flask和SQLAlchemy</title>
      <link href="/blog/2015/04/17/2015-04-18-flask-base/"/>
      <content type="html"><![CDATA[<h3 id="Flask和SQLAlchemy"><a href="#Flask和SQLAlchemy" class="headerlink" title="Flask和SQLAlchemy"></a>Flask和SQLAlchemy</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>怎么使用virtualenv</p><ol><li><p>安装virtualenv<br>$ sudo easy_install virtualenv<br>或者 $ sudo pip install virtualenv</p></li><li><p>添加virtualenv到文件夹<br>$ virtualenv venv</p></li><li><p>激活virtual环境<br>$ . venv/bin/activate</p></li><li><p>安装python</p></li><li><p>安装flask到虚拟环境,如果全局使用 $ sudo pip install Flask<br>$  pip install Flask</p></li><li><p>安装 SQLAlchemy<br>$ pip install flask-sqlalchemy<br>学习网站: <a href="http://pythonhosted.org/Flask-SQLAlchemy/quickstart.html" target="_blank" rel="noopener">http://pythonhosted.org/Flask-SQLAlchemy/quickstart.html</a></p></li><li><p>操作数据库前需要先创建</p></li><li><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p> 将当前的依赖包放入requrements.txt中<br> (venv) $ pip freeze &gt;requirements.txt</p><hr><p> 安装依赖包<br> (venv) $ pip install -r requirements.txt</p></li></ol>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask, 怎么使用virtualenv </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python pip, flask使用备忘</title>
      <link href="/blog/2015/03/31/2015-03-31-pip/"/>
      <content type="html"><![CDATA[<h3 id="pip使用"><a href="#pip使用" class="headerlink" title="pip使用"></a>pip使用</h3><p>官网文档:<a href="https://pip.pypa.io/en/latest/user_guide.html" target="_blank" rel="noopener">https://pip.pypa.io/en/latest/user_guide.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 安装pip(需要使用sudo授权)</span><br><span class="line"></span><br><span class="line">- 安装pip</span><br><span class="line">$ sudo easy_install pip </span><br><span class="line">- 更新pip</span><br><span class="line">$ pip install -U pip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 使用pip</span><br><span class="line">- 安装插件</span><br><span class="line">(venv) $ pip install flask           # lastest version</span><br><span class="line">(venv) $ pip install flask--0.10.0 # specify version</span><br><span class="line">(venv) $ pip install &apos;flask&gt;=0.10.0&apos;    # minimun version</span><br><span class="line">- 更新插件</span><br><span class="line">(venv) $ pip install --upgrade flask</span><br><span class="line">- 卸载插件</span><br><span class="line">(venv) $ pip uninstall flask</span><br><span class="line">- Requirements files</span><br><span class="line">(venv) $ pip install -r requirements.txt </span><br><span class="line">- Requirements格式</span><br><span class="line">https://pip.pypa.io/en/latest/reference/pip_install.html#requirements-file-format</span><br><span class="line">- 列表</span><br><span class="line">(venv) $ pip list# 列出所有已安装包</span><br><span class="line">(venv) $ pip list --outdated # 列出过期包</span><br><span class="line">- 详情</span><br><span class="line">(venv) $ pip show flask</span><br><span class="line">- 查询</span><br><span class="line">(venv) $ pip search &quot;flask&quot;</span><br><span class="line">- freeze</span><br><span class="line">Output installed packages in requirements format.</span><br><span class="line">packages are listed in a case-insensitive sorted order.</span><br><span class="line"></span><br><span class="line">* 安装 virtualenv</span><br><span class="line">- 安装</span><br><span class="line">$ sudo easy_install virtualenv</span><br><span class="line">- 在文件夹中加入virtualenv</span><br><span class="line">$ virtualenv venv</span><br><span class="line">- 开启</span><br><span class="line">$ . venv/bin/activate</span><br><span class="line">- 查看版本</span><br><span class="line">$ virtualenv --version</span><br><span class="line"></span><br><span class="line">* requirements示例:</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python, pip, flask </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS样式基础学习笔记</title>
      <link href="/blog/2015/03/26/2015-03-27-css-base/"/>
      <content type="html"><![CDATA[<h3 id="CSS基础学习"><a href="#CSS基础学习" class="headerlink" title="CSS基础学习"></a>CSS基础学习</h3><p>问题:</p><ol><li>css的作用</li><li>css的原理</li><li>css的使用,针对每个部件配置</li><li>布局</li><li>字体,大小</li><li>颜色</li></ol><p>语法:<br><figure class="highlight plain"><figcaption><span>&#123;declaration1; declaration2;...;declarationN&#125; </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line"> h1 &#123;color:red;font-size:14px&#125;</span><br></pre></td></tr></table></figure></p><p>6.颜色:            </p><p>颜色有三种方法,名称,十六进制,RGB<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p &#123;color:red&#125;</span><br><span class="line">p &#123;color:#ff0000;&#125;</span><br><span class="line">p &#123;color:#f00;&#125;</span><br><span class="line">p &#123;color:rgb&#123;255,0,0&#125;&#125;</span><br><span class="line">p &#123;color:rgb&#123;100%,0%,0%&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>p {font-family:”sans serif”; font-size:14px} # 值为若干单词,则需要加引号</p><ol><li>分组:    </li></ol><p>h1, h2, h3, h4, h5, h6 {<br>    color:green;<br>}</p><ol><li><p>继承及其问题:<br>如果定义了body,则body中的的元素都采用该样式,如果想某个子特殊,则单独定义就可以了</p></li><li><p>派生选择器:<br>l1 strong {<br> font-style:italic;<br> font-weight:normal;<br>}</p></li><li><strong>我是斜体字,因为Strong再li中</strong></li><li><p>id选择器,以”#”来定义:    </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#red &#123;red:red;&#125;</span><br><span class="line">&lt;p id=&quot;red&quot;&gt;红色段落&lt;/p&gt;</span><br></pre></td></tr></table></figure><ol><li><p>id选择器和派生选择器,以#开始</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#sidebar p &#123;</span><br><span class="line">font-style:italic;</span><br><span class="line">text-align:right;</span><br><span class="line">margin-top: 0.5em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>css类选择器,以.开始        </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">.center &#123;text-align:center&#125; </span><br><span class="line">所有center类的html元素均居中</span><br><span class="line">&lt;h1 class=&quot;center&quot;&gt;</span><br><span class="line">居中的内容</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;p class=&quot;center&quot;&gt;</span><br><span class="line">居中的段落</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">class派生选择器</span><br><span class="line"></span><br><span class="line">.fancy td &#123;</span><br><span class="line">color: #f60;</span><br><span class="line">background:#666;</span><br><span class="line">&#125;</span><br><span class="line">示例:</span><br><span class="line">&lt;div class=&quot;fancy&quot;&gt;</span><br><span class="line">..</span><br><span class="line">&lt;td&gt;内容&lt;/td&gt;</span><br><span class="line">..</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">td.fancy &#123;</span><br><span class="line">color:#f60;</span><br><span class="line">background:#666;</span><br><span class="line">&#125;</span><br><span class="line">示例:&lt;td class=&quot;fancy&quot;&gt;</span><br></pre></td></tr></table></figure><ol><li>css属性选择器,对带有制定属性的html的元素设置样式.用[]包括<br>只有在规定了 !DOCTYPE 时，IE7 和 IE8 才支持属性选择器。在 IE6 及更低的版本中，不支持属性选择</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line"></span><br><span class="line">[title]</span><br><span class="line">&#123;</span><br><span class="line">color:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;h2 title=&quot;Hello world&quot;&gt;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">属性值选择器</span><br><span class="line">[title=W3School]</span><br><span class="line">&#123;</span><br><span class="line">border:5px solid blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;img title=&quot;W3School&quot; src=&quot;/i/w3school_logo_white.gif&quot; /&gt;</span><br><span class="line"></span><br><span class="line">属性和值多个值</span><br><span class="line">下面的例子为包含指定值的title属性的所有元素设置样式。适用于由空格分隔的属性值：</span><br><span class="line">[title~=hello]&#123;color:red;&#125;</span><br><span class="line">下面的例子为带有包含指定值的 lang属性的所有元素设置样式。适用于由连字符分隔的属性值：</span><br><span class="line">[lang|=en]&#123;color:red;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">设置表单的样式</span><br><span class="line">属性选择器在为不带有 class 或 id 的表单设置样式时特别有用：</span><br><span class="line">input[type=&quot;text&quot;]</span><br><span class="line">&#123;</span><br><span class="line">  width:150px;</span><br><span class="line">  display:block;</span><br><span class="line">  margin-bottom:10px;</span><br><span class="line">  background-color:yellow;</span><br><span class="line">  font-family: Verdana, Arial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input[type=&quot;button&quot;]</span><br><span class="line">&#123;</span><br><span class="line">  width:120px;</span><br><span class="line">  margin-left:35px;</span><br><span class="line">  display:block;</span><br><span class="line">  font-family: Verdana, Arial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CSS 选择器参考手册</span><br><span class="line">选择器描述</span><br><span class="line">[attribute]用于选取带有指定属性的元素。</span><br><span class="line">[attribute=value]用于选取带有指定属性和值的元素。</span><br><span class="line">[attribute~=value]用于选取属性值中包含指定词汇的元素。</span><br><span class="line">[attribute|=value]用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。</span><br><span class="line">[attribute^=value]匹配属性值以指定值开头的每个元素。</span><br><span class="line">[attribute$=value]匹配属性值以指定值结尾的每个元素。</span><br><span class="line">[attribute*=value]匹配属性值中包含指定值的每个元素。</span><br></pre></td></tr></table></figure><p>外部样式表:</p><head><br><link rel="stylesheet" type="text/css" href="mystyle.css"><br></head><p>样式表mystyle.css<br>hr {color: sienna;}<br>p {margin-left:20px}<br>body {background-image:url(‘images/back40.gif’)}</p><p>不要在属性值与单位之间留有空格。假如你使用 “margin-left: 20 px” 而不是 “margin-left: 20px” ，它仅在 IE 6 中有效，但是在 Mozilla/Firefox 或 Netscape 中却无法正常工作。</p><p>内部样式表<br>当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 <style> 标签在文档头部定义内部样式表，就像这样:</p><head><br><style type="text/css"><br>  hr {color: sienna;}<br>  p {margin-left: 20px;}<br>  body {background-image: url(“images/back40.gif”);}<br></style><br></p><p>内联样式<br>由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。<br>要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。本例展示如何改变段落的颜色和左外边距：</p><p style="color: sienna; margin-left: 20px"><br>This is a paragraph<br></p><p>###标签:</p><h2 id="文字相关"><a href="#文字相关" class="headerlink" title="文字相关:"></a>文字相关:</h2><p>color:black<br>font-family:arial<br>font-size<br>text-align:center, right<br>font-weight:normal<br>font-style:italic</p><h2 id="布局相关"><a href="#布局相关" class="headerlink" title="布局相关:"></a>布局相关:</h2><p>background:#fff<br>margin: 0;<br>padding: 0;<br>margin-top: 0.5em;<br>padding:10px; </p>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html, css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flask database使用</title>
      <link href="/blog/2015/03/24/2015-03-24-python-database/"/>
      <content type="html"><![CDATA[<h3 id="Flask-SQLAlchemy的使用"><a href="#Flask-SQLAlchemy的使用" class="headerlink" title="Flask-SQLAlchemy的使用"></a>Flask-SQLAlchemy的使用</h3><ol><li><p>初始化    </p><ul><li><p>安装sqlalchemy         </p><figure class="highlight plain"><figcaption><span>$ pip install flask-sqlalchemy```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">* 初始化:</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"># 导入包</span><br><span class="line">from flask.ext.sqlalchemy import SQLAlcheymy</span><br><span class="line">basedir = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"># 配置数据库路径</span><br><span class="line">app.config[&apos;SQLALCHEMY_DATABASE_URI&apos;] =\</span><br><span class="line">&apos;sqlite:///&apos;+os.path.join(basedir,&apos;data.sqlite&apos;)</span><br><span class="line">app.config([&apos;SQLALCHEMY_COMMIT_ON_TEARDOWN&apos;]) = True</span><br><span class="line"></span><br><span class="line"># 初始</span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>模型管理    </p></li></ol><ul><li>建立模型        </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">class Role(db.Model):</span><br><span class="line">__tablename__ = &apos;roles&apos;  # 自定义表名</span><br><span class="line">id = db.Column(db.Integer, primary_key=True)  # primary_key 主键</span><br><span class="line">name = db.Column(db.String(64), unique=True)  # unique 唯一</span><br><span class="line">def __repr__(self):</span><br><span class="line">return &apos;&lt;Role %r&gt;&apos; % self.name</span><br><span class="line"></span><br><span class="line">class User(db.Model):= &apos;users&apos;</span><br><span class="line">id = db.Column(db.Integer, primary_key=True)</span><br><span class="line">username = db.Column(db.String(64), unique=True, index=True) # index索引,有助于数据查询</span><br><span class="line">def __repr__(self):</span><br><span class="line">return &apos;&lt;User % __tablename__ r&gt;&apos; % self.username</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">* 关系示例</span><br><span class="line"></span><br><span class="line">one-to-many示例:</span><br><span class="line">```</span><br><span class="line">class Role(db.Model):</span><br><span class="line"># ...</span><br><span class="line">users = db.relationship(&apos;User&apos;, backref=&apos;role&apos;)</span><br><span class="line"></span><br><span class="line">class User(db.Model):= &apos;users&apos;</span><br><span class="line"># ..</span><br><span class="line">role_id = db.Column(db.Integer, db.ForeignKey(&apos;roles.id&apos;))</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">one-to-one示例:</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">class Role(db.Model):</span><br><span class="line"># ...</span><br><span class="line">user = db.relationship(&apos;User&apos;, backref=&apos;role&apos;, uselist=Flase) # 添加uselist为False</span><br><span class="line"></span><br><span class="line">class User(db.Model):= &apos;users&apos;</span><br><span class="line"># ..</span><br><span class="line">role_id = db.Column(db.Integer, db.ForeignKey(&apos;roles.id&apos;))</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">many-to-many示例:</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"># 关系定义需要先于model</span><br><span class="line">registrations = db.Table(&apos;registrations&apos;,</span><br><span class="line">db.Column(&apos;student_id&apos;, db.Integer, db.ForeignKey(&apos;students.id&apos;)),</span><br><span class="line">db.Column(&apos;class_id&apos;,db.Integer, db.ForeignKey(&apos;classes.id&apos;)))</span><br><span class="line"></span><br><span class="line">class Student(db.Model):</span><br><span class="line">id = db.Column(db.Integer, primary_key=True)</span><br><span class="line">name = db.Column(db.String)</span><br><span class="line">classes = db.relationship(&apos;Class&apos;,</span><br><span class="line">secondary=registrations,</span><br><span class="line">backref=db.backref(&apos;students&apos;,lazy=&apos;dynamic&apos;),</span><br><span class="line">lazy=&apos;dynamic&apos;)</span><br><span class="line"></span><br><span class="line">class Class(db.Model):</span><br><span class="line">id = db.Column(db.Integer, primary_key=True)</span><br><span class="line">name = db.Column(db.String)</span><br></pre></td></tr></table></figure><p>self many-to-many示例:        </p><pre><code>class Follow(db.Model):    __tablename__ = &apos;follows&apos;    follower_id = db.Column(db.Integer, db.ForeignKey(&apos;users.id&apos;),                            primary_key=True)    followed_id = db.Column(db.Integer, db.ForeignKey(&apos;users.id&apos;),                            primary_key=True)    timestamp = db.Column(db.DateTime, default=datetime.utcnow)class User(UserMixin, db.Model):     # ...    followed = db.relationship(&apos;Follow&apos;,                               foreign_keys=[Follow.follower_id],                               backref=db.backref(&apos;follower&apos;, lazy=&apos;joined&apos;),                               lazy=&apos;dynamic&apos;,                               cascade=&apos;all, delete-orphan&apos;)    followers = db.relationship(&apos;Follow&apos;,                                foreign_keys=[Follow.followed_id],                                backref=db.backref(&apos;followed&apos;, lazy=&apos;joined&apos;),                                lazy=&apos;dynamic&apos;,                                cascade=&apos;all, delete-orphan&apos;)</code></pre><p>UserMixin是什么鬼</p><p><a href="/assets/flask_sqlalchemy1.png"><img src="/assets/flask_sqlalchemy1.png" alt=""></a><br><a href="/assets/flask_sqlalchemy2.png"><img src="/assets/flask_sqlalchemy2.png" alt=""></a><br><a href="/assets/flask_sqlalchemy3.png"><img src="/assets/flask_sqlalchemy3.png" alt=""></a><br><a href="/assets/flask_sqlalchemy4.png"><img src="/assets/flask_sqlalchemy4.png" alt=""></a>    </p>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python, flask, sqlalchemy, database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python Flask使用备忘</title>
      <link href="/blog/2015/03/20/2015-03-20-python-flask/"/>
      <content type="html"><![CDATA[<p>备忘:        </p><ol><li>处理请求参数:通过request.args.get可以获取get的参数和将参数放入header的post请求,如果需要处理将form-data的数据,需要使用request.form[‘key’]获取</li></ol><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">method = request.method</span><br><span class="line">if method == &apos;POST&apos;:</span><br><span class="line">username = request.form[&apos;username&apos;]</span><br><span class="line">password = request.form[&apos;password&apos;]</span><br><span class="line">elif method == &apos;GET&apos;:</span><br><span class="line">username = request.args.get(&apos;username&apos;)</span><br><span class="line">password = request.args.get(&apos;password&apos;)</span><br></pre></td></tr></table></figure></p><ol><li><p>one-to-many的模型数据查询中,对于多的那一方查询,比如 person.posts,得到的时一个sql查询,需要使用person.posts.all()才能获取到数据        </p></li><li><p>处理 @app.route(‘/xxx’), 如果是post请求记得,要添加methods=[‘POST’]    </p></li></ol>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python, flask, alchemy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS in-house发布</title>
      <link href="/blog/2015/03/19/2015-03-19-in-house-distribution/"/>
      <content type="html"><![CDATA[<p>几个备忘:        </p><ol><li>plist的链接必须是https开头的,貌似第三方存储平台没啥用,还是考虑怎么在服务器端搞定吧</li><li>新版不会自动生成plist,所以需要手动的去弄</li><li><a href="https://xx./xx.plist这里对于长度没要求,不一定必须放入根目录中,(不知道谁好像说过,反正这个是没要求的)" target="_blank" rel="noopener">https://xx./xx.plist这里对于长度没要求,不一定必须放入根目录中,(不知道谁好像说过,反正这个是没要求的)</a></li><li>生成证书的参考这里 <a href="http://blog.csdn.net/abbottsuccess/article/details/4445160" target="_blank" rel="noopener">http://blog.csdn.net/abbottsuccess/article/details/4445160</a>, 需要在keychain的偏好设置–证书–OCSP关闭, CRL关闭再请求</li><li>ssl申请网站 <a href="https://www.wosign.com" target="_blank" rel="noopener">沃通</a></li></ol><p>参考网址:<br><a href="http://blog.csdn.net/pang040328/article/details/40924737" target="_blank" rel="noopener">http://blog.csdn.net/pang040328/article/details/40924737</a>        </p><p><a href="/assets/AppName.plist">空白模板</a></p>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios, ad-hoc, 企业发布 ,发布, In house, </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS 应用的图标和启动图尺寸</title>
      <link href="/blog/2015/03/11/2015-03-11-ios-default-icon/"/>
      <content type="html"><![CDATA[<p>官网数据:<br><a href="https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27-SW1" target="_blank" rel="noopener">https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27-SW1</a></p><p>#Icon</p><ul><li>iPhone icon size    </li></ul><table><thead><tr><th>尺寸</th><th>图片名称</th><th>备注</th></tr></thead><tbody><tr><td>57 x 57</td><td>Icon.png</td><td>iOS 5, 6</td></tr><tr><td>114 x 114</td><td><a href="mailto:Icon@2x.png" target="_blank" rel="noopener">Icon@2x.png</a></td><td>iOS 5, 6</td></tr><tr><td>120 x 120</td><td><a href="mailto:Icon-60@2x.png" target="_blank" rel="noopener">Icon-60@2x.png</a></td><td>iOS 7, 8</td></tr><tr><td>29 x 29</td><td>Icon-Small.png</td><td>Spotlight -iOS5,6 Settings-iOS 5-8</td></tr><tr><td>58 x 58</td><td><a href="mailto:Icon-Small@2x.png" target="_blank" rel="noopener">Icon-Small@2x.png</a></td><td>Spotlight -iOS5,6 Settings-iOS 5-6</td></tr><tr><td>80 x 80</td><td><a href="mailto:Icon-Small-40@2x.png" target="_blank" rel="noopener">Icon-Small-40@2x.png</a></td><td>Spotlight -iOS57,8</td></tr></tbody></table><ul><li>iPad    </li></ul><table><thead><tr><th>尺寸</th><th>图片名称</th><th>备注</th></tr></thead><tbody><tr><td>72 x 72</td><td>Icon-72.png</td><td>iOS 5, 6</td></tr><tr><td>144 x 144</td><td><a href="mailto:Icon-72@2x.png" target="_blank" rel="noopener">Icon-72@2x.png</a></td><td>iOS 5, 6</td></tr><tr><td>180 x 180</td><td><a href="mailto:Icon-60@3x.png" target="_blank" rel="noopener">Icon-60@3x.png</a></td><td>iOS 7, 8</td></tr><tr><td>29 x 29</td><td>Icon-Small.png</td><td>Settings -iOS5,8</td></tr><tr><td>58 x 58</td><td><a href="mailto:Icon-Small@2x.png" target="_blank" rel="noopener">Icon-Small@2x.png</a></td><td>Settings -iOS5,8</td></tr><tr><td>50 x 50</td><td>Icon-Small-50.png</td><td>Spotlight -iOS5,6</td></tr><tr><td>100 x 100</td><td><a href="mailto:Icon-Small-50@2x.png" target="_blank" rel="noopener">Icon-Small-50@2x.png</a></td><td>Spotlight -iOS5,6</td></tr><tr><td>80 x 80</td><td><a href="mailto:Icon-Small-40@2x.png" target="_blank" rel="noopener">Icon-Small-40@2x.png</a></td><td>Spotlight -iOS7,8</td></tr></tbody></table><p>###启动图</p><table><thead><tr><th>设备</th><th>尺寸</th><th>图片名称</th></tr></thead><tbody><tr><td>iphone 3</td><td>320 x 480</td><td>Default.png</td></tr><tr><td>iphone 4</td><td>640 x 960</td><td><a href="mailto:Default@2x.png" target="_blank" rel="noopener">Default@2x.png</a></td></tr><tr><td>iphone 5</td><td>640 x 1136</td><td><a href="mailto:Default-568h@2x.png" target="_blank" rel="noopener">Default-568h@2x.png</a></td></tr><tr><td>iphone 6</td><td>750 x 1334</td><td><a href="mailto:Default-667h@2x.png" target="_blank" rel="noopener">Default-667h@2x.png</a></td></tr><tr><td>iphone 6p</td><td>1242 x 2208</td><td><a href="mailto:Default-736h@3x.png" target="_blank" rel="noopener">Default-736h@3x.png</a></td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios, Icon, 启动图, Default </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python study 0</title>
      <link href="/blog/2015/02/27/2015-02-27-python-study-0/"/>
      <content type="html"><![CDATA[<h3 id="input-amp-output"><a href="#input-amp-output" class="headerlink" title="input &amp; output"></a>input &amp; output</h3><ol><li>输出  <code>print &#39;Hello, world&#39;</code></li><li>输入  <code>name = raw_input()</code></li><li>注释: <code># 这是注释</code></li><li>Bool: <code>True , False, and, or, not</code></li><li>空值:  <code>None</code></li><li>常量:  全部大写</li><li>unicode <code>print u&#39;中文8. &#39;</code></li><li>格式化: <code>%d 整数, %f浮点数, %s字符串 %x 十六进制</code></li><li>list-初始 <code>classmates = [&#39;A&#39;, &#39;B&#39;]</code></li><li>list-计算长度 <code>len(classmates)</code></li><li>list-索引 <code>classmates[0]</code></li><li>list-添加,删除 <code>classmates.append(&#39;C&#39;)   classmates.insert(1, &#39;Jack&#39;) classmates.pop()</code></li><li>tuple 一旦初始就不能修改, 如 classmates = (‘A’, ‘B’, ‘C’)</li></ol><p>疑问,python中添加中文注释</p>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用app url scheme</title>
      <link href="/blog/2015/02/10/2015-02-10-usual-app-scheme/"/>
      <content type="html"><![CDATA[<p>微信电话本:  sharecalllog://        </p><p>微信: wechat://        </p><p>怎么获取app的 url scheme 参考网址:<a href="http://stackoverflow.com/questions/6845693/can-i-extract-the-custom-url-scheme-from-a-ipa-file" target="_blank" rel="noopener">http://stackoverflow.com/questions/6845693/can-i-extract-the-custom-url-scheme-from-a-ipa-file</a></p><p>Yes, this is possible. First, unzip the .ipa file. (you can rename it with .zip to do this). Then, inside the .ipa file, you will find there is a Info.plist file. You can parse that file, look for “CFBundleURLSchemes” and you will see first the app id followed by the Custom URL if one is defined for the app.        </p><p>翻译:将下载的ipa后缀改为.zip,解压,找到应用中的info.plist,然后找到CFBundleURLSchemes这个key,找到第一个值,如weichat,则url scheme为 wechat://,在手机的safari中尝试下</p>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>json基础及解析</title>
      <link href="/blog/2015/02/09/2015-02-09-json-analysis/"/>
      <content type="html"><![CDATA[<h2 id="json格式解析"><a href="#json格式解析" class="headerlink" title="json格式解析"></a>json格式解析</h2><ol><li>格式2.     <ul><li>json两种构建方法:键值对组,通俗的说就是字典        </li><li>有序的值组,通俗的说就是数组    </li></ul></li><li>元素构成3.<br> 2.1 object(字典),以一个 { 开始,以 } 结束, 每组子元素以字符串为key:value形式由,分隔开来<br> <img src="http://www.json.org/object.gif" alt=""><br> 示例:<code>{&quot;name&quot;:&quot;xuqiang&quot;,&quot;gender&quot;:&quot;男&quot;}</code><br> 2.2 array(数组),以一个 [ 开始, 以 ] 结束,每组value由, 分隔<br> <img src="http://www.json.org/array.gif" alt=""><br> 示例:<code>[&quot;张三&quot;,&quot;李四&quot;, &quot;王五&quot;]</code><br> 2.3 value(值), 可以是通过””包裹的字符串,可以是数字,可以是bool值(true,false),或者null,或者一个object(2.1),或者一个value(2.2),结构可以嵌套<br> <img src="http://www.json.org/value.gif" alt=""><br> 2.4 string(字符串),通过双引号包裹,如果中间需要加入引号,则需要使用\进行转移,如 <code>&quot;\&quot;&quot;</code>,表示有一个引号,下图列出了需要转义的字符<br> <img src="http://www.json.org/string.gif" alt=""><br> 2.5 number(数字),一般使用十进制,不进行详细说明<br> <img src="http://www.json.org/number.gif" alt=""></li><li>在线解析辅助<br> <a href="http://json.parser.online.fr" target="_blank" rel="noopener">www.bejson.com</a><br> <a href="http://json.parser.online.fr" target="_blank" rel="noopener">http://json.parser.online.fr</a></li><li>使用示例:</li><li>iOS解析JSON</li></ol>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ios NSObject学习</title>
      <link href="/blog/2015/02/06/2015-02-06-objectnote/"/>
      <content type="html"><![CDATA[<p>加载, 初始化</p>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>支付宝sdk藏得如此之深</title>
      <link href="/blog/2015/02/02/2015-02-02-alipay/"/>
      <content type="html"><![CDATA[<p>网址:<a href="https://b.alipay.com/order/productDetail.htm?productId=2013080604609654&amp;tabId=4#ps-tabinfo-hash" target="_blank" rel="noopener">https://b.alipay.com/order/productDetail.htm?productId=2013080604609654&amp;tabId=4#ps-tabinfo-hash</a> 吓尿了,找了半天没找到</p>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>怎么导出p12的根证书</title>
      <link href="/blog/2015/01/28/2015-01-28-export-root-auth/"/>
      <content type="html"><![CDATA[<p>###导出根证书步骤        </p><p>步骤1 ：在LauchPad中找到“钥匙串”这个应用， 打开    </p><p><a href="/album/root_auth/root_auth_1.png"><img src="/album/root_auth/root_auth_1.png" alt=""></a>     </p><p>步骤2：打开的“钥匙串”应用如下，如下图，选择“登录”-“证书”，在右边找到自己的证书，（如果没有像下图展开，则单击2旁边那个三角展开），按住command键同时选中两项，右击“导出2项”。    </p><p><a href="/album/root_auth/root_auth_2.png"><img src="/album/root_auth/root_auth_2.png" alt=""></a>    </p><p>步骤3：保存，选择存放路径，文件格式选择.p12，选择存储   </p><p><a href="/album/root_auth/root_auth_3.png"><img src="/album/root_auth/root_auth_3.png" alt=""></a>    </p><p>步骤4：输入密码（该密码用于使用.p12证书的人，使用的时候需要输入密码此才能完成导入）    </p><p><a href="/album/root_auth/root_auth_4.png"><img src="/album/root_auth/root_auth_4.png" alt=""></a>   </p><p>步骤5：选择“好”，保存本地  </p><p>###使用p12证书        </p><ol><li><p>双击p12证书，输入密码（导出的时候设置密码）   </p></li><li><p>重复导出步骤1，2查看证书是否存在    </p></li></ol>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go的基础用法</title>
      <link href="/blog/2014/12/01/2014-12-01-go-base/"/>
      <content type="html"><![CDATA[<p>###目标</p><ul><li>Revel+Xorm</li><li>处理请求,Get/Post/Put    </li><li>管理持久化,增删改查,模型确定和使用,更新升级数据库</li><li>查询数据, SQL语句</li><li><p>返回数据, RESTFUL请求回调</p></li><li><p>访问日志 log</p></li><li>同步异步</li><li>环境配置</li><li>Http协议</li><li>Unbuntu的使用</li><li>测试用例</li><li>源码学习</li><li>session cookie</li></ul><ol><li>fmt输出:<br>fmt.Printf(“abc %d”, 1)<br>fmt.Println(“abc”)</li></ol><p>##Unbuntu下Golang的使用</p><p>###源码安装:</p><ol><li>下载安装包</li><li>解压到 /usr/local</li><li><p>配置路径 编辑 ~/.profile,在最后添加 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOBIN=$GOROOT/bin</span><br><span class="line">export PATH=$PATH:$GOBIN</span><br></pre></td></tr></table></figure></li><li><p>运行bash文件,安装GO     </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$:cd /usr/local/go</span><br><span class="line">$:./all.bash</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line">5. 使路径生效,(重启电脑)或者 运行 $:source ./.profile</span><br><span class="line">6. 验证路径生效,验证 $:echo $GOROOT, 成功即返回: /usr/local/go</span><br><span class="line"></span><br><span class="line">7. 验证go安装成功, 输入 $:go version,查看是否会返回相关配置</span><br><span class="line">8. GOPATH</span><br><span class="line">方法同GOROOT, </span><br><span class="line"></span><br><span class="line">备注:</span><br></pre></td></tr></table></figure></li></ol><p>以上 $GOPATH 目录约定有三个子目录：</p><p>src 存放源代码（比如：.go .c .h .s等）<br>pkg 编译后生成的文件（比如：.a）<br>bin 编译后生成的可执行文件（为了方便，可以把此目录加入到 $PATH 变量中，如果有多个gopath，那么使用${GOPATH//://bin:}/bin添加所有的bin目录）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">###apt-get安装(版本可能不是最新版,要安装最新版,需要使用源码安装):</span><br><span class="line">-----------</span><br></pre></td></tr></table></figure><p>在terminal中输入go,根据系统提示,运行相关的 sudo apt-get xxgo    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">###apt-get卸载:</span><br><span class="line">-----------</span><br></pre></td></tr></table></figure><h1 id="卸载go"><a href="#卸载go" class="headerlink" title="卸载go"></a>卸载go</h1><p>sudo apt-get remove golang-go</p><h1 id="卸载go并且删除相关配置"><a href="#卸载go并且删除相关配置" class="headerlink" title="卸载go并且删除相关配置"></a>卸载go并且删除相关配置</h1><p>sudo apt-get purge golang-go<br><code>`</code>    </p>]]></content>
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git使用备忘</title>
      <link href="/blog/2014/11/25/2014-11-25-git-notes/"/>
      <content type="html"><![CDATA[<p>#####牛X哄哄参考资料:<br><a href="http://git-scm.com/book/zh/v1" target="_blank" rel="noopener">ProGit</a><br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰博客</a></p><hr><p>###初始    </p><ul><li>本地初始:    命令:<figure class="highlight plain"><figcaption><span>git init```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">* clone  命令:```$: git clone git://www.abc.com/abc.git```</span><br><span class="line"></span><br><span class="line">###状态</span><br><span class="line">文件有两种状态:</span><br><span class="line">**unStaged(未跟踪) | staged(已跟踪)**</span><br><span class="line"></span><br><span class="line">*备注:只有已跟踪的文件才能提交到暂存区,之后才能提交到git仓库中*</span><br><span class="line">###存储区域</span><br><span class="line">** WorkArea(工作区)| Staged Area(暂存区) | Git Repository(Git仓库) **</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###文件流程</span><br><span class="line"></span><br><span class="line">案例1: 新增文件&gt; 加入暂存&gt; 存入Git仓库</span><br><span class="line"></span><br><span class="line">操作|状态|存储区域</span><br><span class="line">---------------------|----|------</span><br><span class="line">新增readme|未跟踪|工作区</span><br><span class="line">$:git add readme|跟踪|暂存区</span><br><span class="line">$:git commit -m &quot;add&quot;  |跟踪|Git仓库</span><br><span class="line"></span><br><span class="line">案例2: 新增文件,立即删除,不能恢复,因为文件处于未跟踪状态</span><br><span class="line"></span><br><span class="line">案例3: 删除文件(已经add)&gt; 从暂存区恢复删除文件,文件将回到暂存区</span><br><span class="line"></span><br><span class="line">操作|状态|存储区域</span><br><span class="line">---------------------|----|------</span><br><span class="line">readme|跟踪|暂存区</span><br><span class="line">$:rm readme |跟踪|回收站</span><br><span class="line">$:git checkout readme|跟踪|暂存区</span><br><span class="line"></span><br><span class="line">案例4: 删除文件(已经commit)&gt; 从Git仓库中恢复</span><br><span class="line"></span><br><span class="line">操作|状态|存储区域</span><br><span class="line">---------------------|----|------</span><br><span class="line">readme|跟踪|Git仓库</span><br><span class="line">$:rm readme |跟踪|回收站</span><br><span class="line">$:git checkout -- readme|跟踪|暂存区</span><br><span class="line"></span><br><span class="line">案例5:文件已经commit没有添加相关Ignore导致每次提交都会产生.xcuserstate文件的提交信息,解决方案</span><br></pre></td></tr></table></figure></li></ul><p>$:git rm –cached path/Proj.xcuserstate<br>$:git commit -m “remove .xcuserstate”</p><p><code>`</code><br>添加 .gitignore文件, 参考文件<a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a>    </p><p><em>————-</em><br><em>未完待续</em></p>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java多态-继承-组合学习笔记</title>
      <link href="/blog/2014/11/12/2014-11-12-java-polymorphism/"/>
      <content type="html"><![CDATA[<p>###备注:<br>继承子类的方法使用@Override重载父类方法中,需要显式调用super.XX(),父类中方法才会执行.    </p><pre><code>package com.cateatcode;// 以下是父类public class Shape {    public void draw () {        System.out.println(&quot;Shape.draw()&quot;);    }    public void erase() {}    // 父类中的方法,如果子类不重载,则默认继承父类行为    public void baseMethod() {        System.out.println(&quot;Shape.baseMethod()&quot;);    }}package com.cateatcode;// 以下是子类public class Square extends Shape {    @Override    public void draw() {        super.draw(); //显式调用父类        System.out.println(&quot;Square.draw()&quot;);    }    @Override    public void erase() {        System.out.println(&quot;Square.erase()&quot;);    }}</code></pre><p>不包含任何类的抽象类不能被初始化        </p>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安卓笔记-Building Your First App</title>
      <link href="/blog/2014/11/05/2014-11-05-android-note1/"/>
      <content type="html"><![CDATA[<p>##安卓笔记-Building Your First App</p><p>暂时支持四种布局   </p><ul><li>Linear Layout</li><li>Relative Layout</li><li>List View</li><li>Grid View</li></ul><p>###wrap_content和match_parent的区别</p><ul><li>wrap_content:根据内容的大小来布局</li><li>match_parent:尽可能跟父视图一样大小</li></ul><p>wrap_content tells your view to size itself to the dimensions required by its content.<br>match_parent (named fill_parent before API Level 8) tells your view to become as big as its parent view group will allow.</p><p>布局中不推荐使用绝对值,而采用wrap_content,match_parent,dp这三种<br>dp:density-independent pixel units 解释:密度独立的像素单元</p><p>padding: setPadding(int, int, int, int)<br>getPaddingLeft(),…</p><p>####通俗布局</p><hr><p>weight默认为0,如果为多个视图中的一个视图指定weight大于0,这个视图将会填充完其他视图填充剩余的视图,为了提高布局效率,需要将其layout_width=”0dp”,因为布局是相对的,在布局的时候会对所有的视图进行一遍计算,将其设置为0可以优先配置好其他,然后剩余给到这个视图</p><p>布局位置:</p><p>获取方法: <figure class="highlight plain"><figcaption><span>getRight() getTop() getBottom()```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例如: getLeft()等于20意味着视图跟左边间距为20;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Load the XML Resource </span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.main_layout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用一个Button的例子</p><ol><li>在xml中创建一个Button</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button android:id=&quot;@+id/my_button&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;@string/my_button_text&quot;/&gt;</span><br></pre></td></tr></table></figure><ol><li>使用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Button myButton = (Button)findViewById(R.id.my_button)</span><br></pre></td></tr></table></figure><p>Intent演示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/** Called when the user clicks the Send button */</span><br><span class="line">public void sendMessage(View view) &#123;</span><br><span class="line">    Intent intent = new Intent(this, DisplayMessageActivity.class);</span><br><span class="line">    EditText editText = (EditText) findViewById(R.id.edit_message);</span><br><span class="line">    String message = editText.getText().toString();</span><br><span class="line">    intent.putExtra(EXTRA_MESSAGE, message);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安卓笔记-Adding the action bar</title>
      <link href="/blog/2014/11/05/2014-11-05-Adding-The-Action-bar/"/>
      <content type="html"><![CDATA[<p>##安卓笔记-Adding The Action Bar</p>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS static lib使用备忘</title>
      <link href="/blog/2014/11/03/2014-11-03-ios-static-lib/"/>
      <content type="html"><![CDATA[<p>关于怎么创建和使用,可以参考这个教程<a href="http://www.raywenderlich.com/41377/creating-a-static-library-in-ios-tutorial" target="_blank" rel="noopener">createing a static library in ios tutorial</a>   </p><h2 id="几点备忘"><a href="#几点备忘" class="headerlink" title="几点备忘:"></a>几点备忘:</h2><ol><li>新建之后不要删除默认生成的xx.h, xx.m,否则编译会出错</li><li>默认已经添加了-ObjC(貌似是从某个xcode就自动添加了)</li><li>注意直接从外面复制文件到静态库中的话需要检查.m的target是否静态库的target,还是测试的target,是测试的target会导致undefined symbols for architecture </li><li>记得将文件添加到copy file中</li><li>静态库内部.h文件的引用<strong>不需要</strong>使用<code>#import&lt;XXLib/AClass.h&gt;</code>,直接使用<code>#import &quot;AClass.h&quot;</code>就可以了</li><li>在Product下的libXX.a右击在Finder中显示,找到外界使用需要引入的.a和头文件文件夹</li></ol><h2 id="新建步骤参考"><a href="#新建步骤参考" class="headerlink" title="新建步骤参考:"></a>新建步骤参考:</h2><ol><li>新建项目,选择static lib,命名XXLib(注意XXLib.h XXLib.m不要删除   </li><li>新增文件(<em>注意target</em>)   </li><li>将新增文件的头文件添加到XXLib.h中      </li><li>将文件添加到copy file中,在target的setting里    </li><li>新增一个aggregate,同时编译模拟器和真机的.a并且通过lipo指令合并,方式是新增target的Build Phases中添加Run Script(<strong>记得替换其中的TGKit文字为自己的lib名称</strong>)     </li></ol><h1 id="define-output-folder-environment-variable"><a href="#define-output-folder-environment-variable" class="headerlink" title="define output folder environment variable"></a>define output folder environment variable</h1><p>UNIVERSAL_OUTPUTFOLDER=${BUILD_DIR}/TGKit</p><h1 id="Step-1-Build-Device-and-Simulator-versions"><a href="#Step-1-Build-Device-and-Simulator-versions" class="headerlink" title="Step 1. Build Device and Simulator versions"></a>Step 1. Build Device and Simulator versions</h1><p>xcodebuild -target TGKit ONLY_ACTIVE_ARCH=NO -configuration ${CONFIGURATION} -sdk iphoneos  BUILD_DIR=”${BUILD_DIR}” BUILD_ROOT=”${BUILD_ROOT}”<br>xcodebuild -target TGKit -configuration ${CONFIGURATION} -sdk iphonesimulator -arch i386 BUILD_DIR=”${BUILD_DIR}” BUILD_ROOT=”${BUILD_ROOT}”</p><h1 id="make-sure-the-output-directory-exists"><a href="#make-sure-the-output-directory-exists" class="headerlink" title="make sure the output directory exists"></a>make sure the output directory exists</h1><p>mkdir -p “${UNIVERSAL_OUTPUTFOLDER}”</p><h1 id="Step-2-Create-universal-binary-file-using-lipo"><a href="#Step-2-Create-universal-binary-file-using-lipo" class="headerlink" title="Step 2. Create universal binary file using lipo"></a>Step 2. Create universal binary file using lipo</h1><p>lipo -create -output “${UNIVERSAL_OUTPUTFOLDER}/lib${PROJECT_NAME}.a” “${BUILD_DIR}/${CONFIGURATION}-iphoneos/lib${PROJECT_NAME}.a” “${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/lib${PROJECT_NAME}.a”</p><h1 id="Last-touch-copy-the-header-files-Just-for-convenience"><a href="#Last-touch-copy-the-header-files-Just-for-convenience" class="headerlink" title="Last touch. copy the header files. Just for convenience"></a>Last touch. copy the header files. Just for convenience</h1><p>cp -R “${BUILD_DIR}/${CONFIGURATION}-iphoneos/include” “${UNIVERSAL_OUTPUTFOLDER}/“</p><ol><li>选择aggregate target进行,run</li><li>打开Product中的.a,找到相关的.a, inclue文件夹</li></ol><p>使用步骤参考:<br>有两种使用方式:</p><ol><li>使用项目方式:</li><li>使用.a和include文件</li></ol><p>使用项目方式:<br>直接将静态库项目的TGKit.xcodeproj拖入目标项目中,在link lib中添加.a,在depend lib中添加.a</p><p>使用.a和include文件,直接拖入项目中</p>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安卓学习第一节</title>
      <link href="/blog/2014/10/30/2014-10-30-hello-android/"/>
      <content type="html"><![CDATA[<p>static:<br>变量:当声明一个事物是static时,就意味着这个域或者方法不会与包含它的那个类的任何对象实例关联在一起.<br>方法:static方法可以不创建类而直接使用 如AClass.staticMethod()</p><p>构造器: XX(){}</p><p>android学习:</p><p>配置一个 EditText代码(hint为空白时显示的文字)    </p><edittext android:id="@+id/edit_message" android:layout_width="wrap_content" android:layout_height="wrap_content" android:hint="@string/edit_message"><p>按钮:text为按钮文字    </p><button android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/button_send"><p>##布局                                                                          </p><p>##布局元素</p></button></edittext>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Markdown语法进阶</title>
      <link href="/blog/2014/10/27/2014-10-27-markdown3/"/>
      <content type="html"><![CDATA[<p>本文为<a href="http://antwork.github.io" target="_blank" rel="noopener">antwork</a>原创，转载请注明作者及出处！</p><p>翻译原文网站:<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">http://daringfireball.net/projects/markdown/</a>,根据原文分为两篇来开展,有兴趣且英文好的童鞋建议看原版 :)</p><ul><li><a href="site.baseurl/2014/10/27/markdown2.md">Markdown基本语法</a>   </li><li><a href="site.baseurl/2014/10/27/markdown3.md">Markdown语法进阶</a>  </li></ul><p>本文原文地址:<a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">http://daringfireball.net/projects/markdown/syntax</a></p><ul><li><p>概览</p><ul><li>原理</li><li>内嵌HTML</li><li>特殊字符自动转义</li></ul></li><li><p>区块元素</p><ul><li>段落和换行  </li><li>标题  </li><li>BlockQuotes  </li><li>列表</li><li>代码块  </li><li>水平原则  </li></ul></li><li><p>Span元素</p><ul><li>链接  </li><li>强调  </li><li>代码  </li><li>图片  </li></ul></li><li><p>其他 </p><ul><li>反斜杠转移</li><li>自动链接 </li></ul></li></ul><p>注释:本文档本身就是用Markdown;查看本页源代码请单击<a href="http://daringfireball.net/projects/markdown/syntax.text" target="_blank" rel="noopener">这里</a></p><h2 id="概览"><a href="#概览" class="headerlink" title="##概览"></a>##概览</h2><p>###原理</p><p>Markdown的产生是为了更简易的读和写,更重要的是可读性,一个Markdown格式的文档需要使用纯文字发布,不需要标签和格式说明来标记,Markdown语法启发于Setext, atx, Textile, reStructuredText, Grutatext, and EtText ,不过最重要的启发来源还是纯文本邮件.</p><p>最后,Markdown的语法全部由标点符号组成,所有的标点符号都是非常慎重的选择已达到所见即所意的的目的,比如:使用星号前后包裹字符 <em>强调</em> . Markdown 的列表看着就像列表,连blockquotes看着都像是在引用一段文字,如果你曾经使用过邮件的话</p>]]></content>
      
      
        <tags>
            
            <tag> markdown 翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/blog/2014/10/27/2014-10-27-markdown2/"/>
      <content type="html"><![CDATA[<p>本文为<a href="http://antwork.github.io" target="_blank" rel="noopener">antwork</a>原创，转载请注明作者及出处！</p><p>翻译原文网站:<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">http://daringfireball.net/projects/markdown/</a>,根据原文分为两篇来开展,有兴趣且英文好的童鞋建议看原版 :)</p><ul><li><a href="site.baseurl/2014/10/27/markdown2.md">Markdown基本语法</a>   </li><li><a href="site.baseurl/2014/10/27/markdown3.md">Markdown语法进阶</a>  </li></ul><p>本文原文地址:<a href="http://daringfireball.net/projects/markdown/basics" target="_blank" rel="noopener">http://daringfireball.net/projects/markdown/basics</a></p><h1 id="学习Markdonw语法主旨"><a href="#学习Markdonw语法主旨" class="headerlink" title="学习Markdonw语法主旨"></a>学习Markdonw语法主旨</h1><hr><p>本页面提供一个使用Markdown的简单使用方法,<a href="site.baseurl/2014/10/27/markdown3.md">语法</a>页面提供更加完整详细的文档和语法特征,Markdown很容易学,你可以查阅一些实例就能学会.本文的实例采用样式前后对比的形式,展示实例的语法和输出的HTML,(译者再加入了实际的显示效果)</p><p>学习markdown最简单有效的方法就是实践, <a href="http://daringfireball.net/projects/markdown/dingus" target="_blank" rel="noopener">Dingus</a>可以让你在线输入Markdown格式的纯文本,然后转化为XHTML.</p><p>注释:原文档本身就是用Markdown;查看原网页源代码请单击<a href="http://daringfireball.net/projects/markdown/syntax.text" target="_blank" rel="noopener">这里</a>  </p><h2 id="段落-标题-区块"><a href="#段落-标题-区块" class="headerlink" title="##段落,标题,区块"></a>##段落,标题,区块</h2><p>段落是由一到多行连续的文本组成,使用一到多个空行进行分隔.(Markdown的空行看起来像一个空行: 一行只包含空白和tabs的话就被当做一个空行).普通的段落不应该使用空白或tab来进行缩进   </p><p>Markdown 提供两种样式的标题:Setext 和 atx<br>采用Setext样式的的</p><h1>和<h2>分别通过在文字底部添加等号(=)和连字号(-)来实现<br>atx样式的标题通过在行首添加1-6个井字号(#)来标记标题等级(h1~h6)<p></p><p>Blockquotes使用邮件格式的’&gt;’大于号来标明</p><ul><li>####MarkDown代码:   </li></ul><hr><pre><code>A First Level Header====================A Second Level Header---------------------Now is the time for all good men to come tothe aid of their country. This is just aregular paragraph.The quick brown fox jumped over the lazy</code></pre><p>dog’s back.</p><pre><code>### Header 3&gt; This is a blockquote.&gt; &gt; This is the second paragraph in the blockquote.&gt;&gt; ## This is an H2 in a blockquote</code></pre><hr><ul><li>####输出HTML代码:</li></ul><hr><pre><code>&lt;h1&gt;A First Level Header&lt;/h1&gt;&lt;h2&gt;A Second Level Header&lt;/h2&gt;&lt;p&gt;Now is the time for all good men to come tothe aid of their country. This is just aregular paragraph.&lt;/p&gt;&lt;p&gt;The quick brown fox jumped over the lazydog&apos;s back.&lt;/p&gt;&lt;h3&gt;Header 3&lt;/h3&gt;&lt;blockquote&gt;    &lt;p&gt;This is a blockquote.&lt;/p&gt;    &lt;p&gt;This is the second paragraph in the blockquote.&lt;/p&gt;    &lt;h2&gt;This is an H2 in a blockquote&lt;/h2&gt;&lt;/blockquote&gt;</code></pre><hr><ul><li>####实际效果:</li></ul><hr><h1 id="A-First-Level-Header"><a href="#A-First-Level-Header" class="headerlink" title="A First Level Header"></a>A First Level Header</h1><h2 id="A-Second-Level-Header"><a href="#A-Second-Level-Header" class="headerlink" title="A Second Level Header"></a>A Second Level Header</h2><p>Now is the time for all good men to come to<br>the aid of their country. This is just a<br>regular paragraph.</p><p>The quick brown fox jumped over the lazy<br>dog’s back.</p><h3 id="Header-3"><a href="#Header-3" class="headerlink" title="Header 3"></a>Header 3</h3><blockquote><p>This is a blockquote.</p><p>This is the second paragraph in the blockquote.</p><h2 id="This-is-an-H2-in-a-blockquote"><a href="#This-is-an-H2-in-a-blockquote" class="headerlink" title="This is an H2 in a blockquote"></a>This is an H2 in a blockquote</h2></blockquote><hr><p>##强调语法:  </p><p>Markdown使用星号和下划线来强调</p><ul><li>####Markdown代码:   </li></ul><hr><pre><code>Some of these words *are emphasized*.   Some of these words _are emphasized also_.   Use two asterisks for **strong emphasis**.  Or, if you prefer, __use two underscores instead__. </code></pre><hr><ul><li><p>####输出为HTML:</p><hr>  <p>Some of these words <em>are emphasized</em>. <br><br>  Some of these words <em>are emphasized also</em>.   </p>  <p>Use two asterisks for <strong>strong emphasis</strong>. <br><br>  Or, if you prefer, <strong>use two underscores instead</strong>. </p></li></ul><hr><ul><li>####显示效果:   </li></ul><hr><p>Some of these words <em>are emphasized</em>.<br>Some of these words <em>are emphasized also</em>.   </p><p>Use two asterisks for <strong>strong emphasis</strong>.<br>Or, if you prefer, <strong>use two underscores instead</strong>.   </p><hr><p>##列表<br>无序列表采用星号,减号和加号来标记</p><ul><li>####Markdown源码  </li></ul><hr><pre><code>*   Candy.*   Gum.*   Booze.   </code></pre><hr><ul><li>####输出HTML</li></ul><hr><pre><code>&lt;ul&gt;&lt;li&gt;Candy.&lt;/li&gt;&lt;li&gt;Gum.&lt;/li&gt;&lt;li&gt;Booze.&lt;/li&gt;&lt;/ul&gt;</code></pre><hr><ul><li>####实际效果    </li></ul><hr><ul><li>Candy.</li><li>Gum.</li><li>Booze.</li></ul><hr><p>有序列表采用常规数字加句号   </p><ul><li>####Markdown有序列表源码    </li></ul><hr><pre><code>1. Red  2. Green3. Blue</code></pre><hr><ul><li>####输出为HTML源码        </li></ul><hr><pre><code>&lt;ol&gt;&lt;li&gt;Red  &lt;/li&gt;&lt;li&gt;Green&lt;/li&gt;&lt;li&gt;Blue&lt;/li&gt;&lt;/ol&gt;</code></pre><hr><ul><li>####实际效果            </li></ul><hr><ol><li>Red  </li><li>Green</li><li>Blue</li></ol><hr><p>如果你在行间添加了空行,你会得到段落标识</p><p>来标记列表项,你可以使用4个空格或者1个tab来创造多段落列表项    </p><ul><li>####Markdown源码:    </li></ul><hr><pre><code>*   A list item.    With multiple paragraphs.*   Another item in the list.    </code></pre><hr><ul><li>####输出:    </li></ul><hr><pre><code>&lt;ul&gt;&lt;li&gt;&lt;p&gt;A list item.&lt;/p&gt;&lt;p&gt;With multiple paragraphs.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Another item in the list.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;    </code></pre><hr><ul><li>####显示效果    </li></ul><hr><ul><li><p>A list item.</p><p>With multiple paragraphs.</p></li><li><p>Another item in the list.    </p></li></ul><hr><h2 id="链接"><a href="#链接" class="headerlink" title="##链接"></a>##链接</h2><p>Markdown支持两种形式的链接:内联和引用,两种形式都采用方括号来划定链接文字界限.    </p><p>内联链接使用圆括号将链接紧跟在链接文字后,例如:</p><hr><pre><code>这是一个[链接](http://example.com/).    </code></pre><hr><p>输出为HTML:    </p><hr><pre><code>&lt;p&gt;这是一个&lt;a href=&quot;http://example.com/&quot;&gt;链接&lt;/a&gt;.&lt;/p&gt;</code></pre><hr><p>显示效果:</p><hr><p>这是一个<a href="http://example.com/" target="_blank" rel="noopener">链接</a>.    </p><hr><p>可选择的,你可以在圆括号内包含一个title属性:</p><hr><pre><code>This is an [example link](http://example.com/ &quot;With a Title&quot;).    </code></pre><hr><p>输出为HTML:    </p><hr><pre><code>&lt;p&gt;This is an &lt;a href=&quot;http://example.com/&quot; title=&quot;With a Title&quot;&gt;</code></pre><p>example link.</p><p></p><hr><p>显示效果:</p><hr><p>his is an <a href="http://example.com/" title="With a Title" target="_blank" rel="noopener">example link</a>.        </p><p>关联样式链接允许你通过名字去关联链接,允许你在文档的其他地方定义:</p><pre><code>I get 10 times more traffic from [Google][1] than from</code></pre><p><a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="noopener">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="noopener">MSN</a>.</p><pre><code>[1]: http://google.com/        &quot;Google&quot;[2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;[3]: http://search.msn.com/    &quot;MSN Search&quot;    </code></pre><p>转化为HTML代码:</p><pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;</code></pre><p>title=”Google”&gt;Google than from <a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="noopener">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="noopener">MSN</a>.</p><p></p><p>实际显示效果:  </p><p>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="noopener">Google</a> than from<br><a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="noopener">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="noopener">MSN</a>.</p><hr><p>title属性是可选的,超链接名字可以包含字母,数字和空格,但是大小写不敏感,例如以下源码:</p><pre><code>I start my morning with a cup of coffee and[The New York Times][NY Times].[ny times]: http://www.nytimes.com/</code></pre><p>输出为HTML代码:    </p><pre><code>&lt;p&gt;I start my morning with a cup of coffee and</code></pre><p><a href="http://www.nytimes.com/" target="_blank" rel="noopener">The New York Times</a>.</p><p></p><p>实际显示效果:</p><hr><p>I start my morning with a cup of coffee and<br><a href="http://www.nytimes.com/" target="_blank" rel="noopener">The New York Times</a>.</p><hr><p>##图片<br>图片语法非常像链接语法.<br>内联样式如下(标题可选):</p><pre><code>![alt text](/path/to/im.jpg &quot;Title&quot;)</code></pre><p>引用样式:</p><pre><code>![alt text][id][id]: /path/to/img.jpg &quot;Title&quot;</code></pre><p>输出HTML为:</p><pre><code>&lt;img src=&quot;/path/to/img.jpg&quot; alt=&quot;alt text&quot; title=&quot;Title&quot; /&gt;</code></pre><p>##代码<br>在常规段落中,你可以用反引号将文字括起来,任何&amp;号和尖括号(&lt;&gt;)将会自动被翻译为HTML实体,这样就方便了使用Markdown来创建HTML的示例:</p><pre><code>I strongly recommend against using any `&lt;blink&gt;` tags.I wish SmartyPants used named entities like `&amp;mdash;`instead of decimal-encoded entites like `&amp;#8212;`.</code></pre><p>输出为HTML:</p><pre><code>&lt;p&gt;I strongly recommend against using any&lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;&lt;p&gt;I wish SmartyPants used named entities like&lt;code&gt;&amp;amp;mdash;&lt;/code&gt; instead of decimal-encodedentites like &lt;code&gt;&amp;amp;#8212;&lt;/code&gt;.&lt;/p&gt;</code></pre><p>实际显示效果:</p><hr><p>I strongly recommend against using any <code>&lt;blink&gt;</code> tags.</p><p>I wish SmartyPants used named entities like <code>&amp;mdash;</code><br>instead of decimal-encoded entites like <code>&amp;#8212;</code>.</p><hr><p>为了指定某一块预定格式(pre-formatted)代码,你可以在每一行代码前添加4个空格或者一个tab.就像使用代码区域,&amp;,&lt;,和&gt;字符一样,会被自动转义.<br>Markdown源码:</p><pre><code>If you want your page to validate under XHTML 1.0 Strict,you&apos;ve got to put paragraph tags in your blockquotes:&lt;blockquote&gt;    &lt;p&gt;For example.&lt;/p&gt;&lt;/blockquote&gt;</code></pre><p>得到HTML代码如下:</p><pre><code>&lt;p&gt;If you want your page to validate under XHTML 1.0 Strict,you&apos;ve got to put paragraph tags in your blockquotes:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;    &amp;lt;p&amp;gt;For example.&amp;lt;/p&amp;gt;&amp;lt;/blockquote&amp;gt;&lt;/code&gt;&lt;/pre&gt;</code></pre><hr><p>(完)</p></h2></h1>]]></content>
      
      
        <tags>
            
            <tag> markdown 翻译 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Markdown语法的学习和实践</title>
      <link href="/blog/2014/10/26/2014-10-26-study-markdown/"/>
      <content type="html"><![CDATA[<p>本文为<a href="http://antwork.github.io" target="_blank" rel="noopener">antwork</a>原创，转载请注明作者及出处！</p><h2 id="目录"><a href="#目录" class="headerlink" title="##目录"></a>##目录</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#title"><strong>标题</strong></a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#block"><strong>区块元素</strong></a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#link"><strong>链接</strong></a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#imagelink"><strong>图片链接</strong></a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#code"><strong>代码插入</strong></a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#reference"><strong>参考</strong></a></p><p><a id="introduce" name="introduce"> </a> </p><h2 id="标题"><a href="#标题" class="headerlink" title="##标题"></a>##标题</h2><p>有两种表示段落的方式:</p><ul><li>类Setext形式</li><li>Atx形式</li></ul><p><strong>类Setext形式</strong>:只能表示两级,最高阶标题=和第二阶标题-, 例如:    </p><h1 id="这是H1标题"><a href="#这是H1标题" class="headerlink" title="这是H1标题"></a>这是H1标题</h1><h2 id="这是H2标题"><a href="#这是H2标题" class="headerlink" title="这是H2标题"></a>这是H2标题</h2><p>任何数量的 = 和 - 都可以有效果<br>效果:</p><p>这是H1标题<br>=</p><p>这是H2标题<br>-</p><p>任何数量的 = 和 - 都可以有效果</p><p><strong>[Warn]</strong>连续的标题需要中间添加一行空白行</p><p><strong>类 Atx形式:</strong>在行首插入1到6个#，对应到标题1到6阶，例如：  </p><h1 id="这是-H1"><a href="#这是-H1" class="headerlink" title="这是 H1"></a>这是 H1</h1><h2 id="这是-H2"><a href="#这是-H2" class="headerlink" title="这是 H2"></a>这是 H2</h2><h6 id="这是-H6"><a href="#这是-H6" class="headerlink" title="这是 H6"></a>这是 H6</h6><p>效果:  </p><h1 id="这是-H1-1"><a href="#这是-H1-1" class="headerlink" title="这是 H1"></a>这是 H1</h1><h2 id="这是-H2-1"><a href="#这是-H2-1" class="headerlink" title="这是 H2"></a>这是 H2</h2><h6 id="这是-H6-1"><a href="#这是-H6-1" class="headerlink" title="这是 H6"></a>这是 H6</h6><p><strong>[Warn]</strong>第一个标题与顶部需要留空白行</p><p><a id="block" name="block"> </a></p><p>##区块元素</p><h3 id="nbsp-nbsp-段落和换行"><a href="#nbsp-nbsp-段落和换行" class="headerlink" title="&nbsp;&nbsp;段落和换行"></a>&nbsp;&nbsp;段落和换行</h3><hr><p><strong>段落</strong>:由一个或者多个连续的文本组成,它的前后要有一个以上的空格,我的建议是段落的前后都留空行,</p><p>比如这样:</p><p>我是段落1,我很孤独</p><p>我是段落2,我很孤独2</p><p>得到的效果图如下:</p><p>我是段落1,我很孤独</p><p>我是段落2,我很孤独</p><p><strong>换行</strong>:这个有些狗血,在插入处先按入两个以上的空格然后回车,可以得到<br>的效果,两者可以通用,注意我很孤独后面还有两个空白</p><p>我是段落1,我很孤独<br>我是段落2,我很孤独</p><p>得到的效果图如下:</p><p>我是段落1,我很孤独<br>我是段落2,我很孤独</p><p>我是段落1,我很孤独<br><br>我是段落2,我很孤独</p><p>得到的效果图如下:</p><p>我是段落1,我很孤独<br>我是段落2,我很孤独</p><p><a href="link" name="link"> </a></p><h2 id="链接"><a href="#链接" class="headerlink" title="##链接"></a>##链接</h2><p>链接文字使用[方括号]来标记<br>行内式:只要在方括号后面紧接着圆括号并插入网址链接即可,如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如</p><p>This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a> inline link.</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.</p><p>得到效果图如下:</p><p>This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a> inline link.</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.</p><p><a href="imagelink" name="imagelink"> </a></p><h2 id="图片链接"><a href="#图片链接" class="headerlink" title="##图片链接"></a>##图片链接</h2><p>格式:![方括号](链接)<br>示例:   </p><p>垃圾百度<img src="http://www.baidu.com/img/bdlogo.png" alt="Icon"></p><p>得到效果图如下:<br>垃圾百度<img src="http://www.baidu.com/img/bdlogo.png" alt="Icon"></p><p><a id="code" name="code"> </a></p><h2 id="代码"><a href="#代码" class="headerlink" title="#代码"></a>#代码</h2><p>缩进四个空白(Tab)<br>示例:    </p><p>这是一个普通段落：</p><pre><code>这是一个代码区块。</code></pre><p>效果:</p><p>这是一个普通段落：</p><pre><code>这是一个代码区块。</code></pre><p><a id="reference" name="reference"> </a></p><h2 id="参考"><a href="#参考" class="headerlink" title="##参考"></a>##参考</h2><ol><li>资源网址:<a href="wowubuntu.com/markdown">wowubuntu.com</a></li><li>学习模板1:<a href="http://webfrogs.me" target="_blank" rel="noopener">WebFrogs</a></li><li>学习模板2:<a href="http://www.yonsm.net" target="_blank" rel="noopener">Yonsm.NET</a></li></ol><hr><h2 id="全文源代码如下"><a href="#全文源代码如下" class="headerlink" title="##全文源代码如下:"></a>##全文源代码如下:</h2><p>本文为<a href="http://antwork.github.io" target="_blank" rel="noopener">antwork</a>原创，转载请注明作者及出处！</p><h2 id="目录-1"><a href="#目录-1" class="headerlink" title="##目录"></a>##目录</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#title"><strong>标题</strong></a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#block"><strong>区块元素</strong></a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#link"><strong>链接</strong></a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#imagelink"><strong>图片链接</strong></a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#code"><strong>代码插入</strong></a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="#reference"><strong>参考</strong></a></p><p><a id="introduce" name="introduce"> </a> </p><h2 id="标题-1"><a href="#标题-1" class="headerlink" title="##标题"></a>##标题</h2><p>有两种表示段落的方式:</p><ul><li>类Setext形式</li><li>Atx形式</li></ul><p><strong>类Setext形式</strong>:只能表示两级,最高阶标题=和第二阶标题-, 例如:    </p><h1 id="这是H1标题-1"><a href="#这是H1标题-1" class="headerlink" title="这是H1标题"></a>这是H1标题</h1><h2 id="这是H2标题-1"><a href="#这是H2标题-1" class="headerlink" title="这是H2标题"></a>这是H2标题</h2><p>任何数量的 = 和 - 都可以有效果</p><p>效果:</p><p>这是H1标题<br>=</p><p>这是H2标题<br>-</p><p>任何数量的 = 和 - 都可以有效果</p><p><strong>[Warn]</strong>连续的标题需要中间添加一行空白行</p><p><strong>类 Atx形式:</strong>在行首插入1到6个#，对应到标题1到6阶，例如：  </p><h1 id="这是-H1-2"><a href="#这是-H1-2" class="headerlink" title="这是 H1"></a>这是 H1</h1><h2 id="这是-H2-2"><a href="#这是-H2-2" class="headerlink" title="这是 H2"></a>这是 H2</h2><h6 id="这是-H6-2"><a href="#这是-H6-2" class="headerlink" title="这是 H6"></a>这是 H6</h6><p>效果:  </p><h1 id="这是-H1-3"><a href="#这是-H1-3" class="headerlink" title="这是 H1"></a>这是 H1</h1><h2 id="这是-H2-3"><a href="#这是-H2-3" class="headerlink" title="这是 H2"></a>这是 H2</h2><h6 id="这是-H6-3"><a href="#这是-H6-3" class="headerlink" title="这是 H6"></a>这是 H6</h6><p><strong>[Warn]</strong>第一个标题与顶部需要留空白行</p><p><a id="block" name="block"> </a></p><p>##区块元素</p><h3 id="nbsp-nbsp-段落和换行-1"><a href="#nbsp-nbsp-段落和换行-1" class="headerlink" title="&nbsp;&nbsp;段落和换行"></a>&nbsp;&nbsp;段落和换行</h3><hr><p><strong>段落</strong>:由一个或者多个连续的文本组成,它的前后要有一个以上的空格,我的建议是段落的前后都留空行,</p><p>比如这样:</p><p>我是段落1,我很孤独</p><p>我是段落2,我很孤独2</p><p>得到的效果图如下:</p><p>我是段落1,我很孤独</p><p>我是段落2,我很孤独</p><p><strong>换行</strong>:这个有些狗血,在插入处先按入两个以上的空格然后回车,可以得到<br>的效果,两者可以通用,注意我很孤独后面还有两个空白</p><p>我是段落1,我很孤独<br>我是段落2,我很孤独</p><p>得到的效果图如下:</p><p>我是段落1,我很孤独<br>我是段落2,我很孤独</p><p>我是段落1,我很孤独<br><br>我是段落2,我很孤独</p><p>得到的效果图如下:</p><p>我是段落1,我很孤独<br>我是段落2,我很孤独</p><p><a href="link" name="link"> </a></p><h2 id="链接-1"><a href="#链接-1" class="headerlink" title="##链接"></a>##链接</h2><p>链接文字使用[方括号]来标记<br>行内式:只要在方括号后面紧接着圆括号并插入网址链接即可,如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如</p><p>This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a> inline link.</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.</p><p>得到效果图如下:</p><p>This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a> inline link.</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.</p><p><a href="imagelink" name="imagelink"> </a></p><h2 id="图片链接-1"><a href="#图片链接-1" class="headerlink" title="##图片链接"></a>##图片链接</h2><p>格式:![方括号](链接)<br>示例:   </p><p>垃圾百度<img src="http://www.baidu.com/img/bdlogo.png" alt="Icon"></p><p>得到效果图如下:<br>垃圾百度<img src="http://www.baidu.com/img/bdlogo.png" alt="Icon"></p><p><a id="code" name="code"> </a></p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="#代码"></a>#代码</h2><p>缩进四个空白(Tab)<br>示例:    </p><p>这是一个普通段落：</p><pre><code>这是一个代码区块。</code></pre><p>效果:</p><p>这是一个普通段落：</p><pre><code>这是一个代码区块。</code></pre><p><a id="reference" name="reference"> </a></p><h2 id="参考-1"><a href="#参考-1" class="headerlink" title="##参考"></a>##参考</h2><ol><li>资源网址:<a href="wowubuntu.com/markdown">wowubuntu.com</a></li><li>学习模板1:<a href="http://webfrogs.me" target="_blank" rel="noopener">WebFrogs</a></li><li>学习模板2:<a href="http://www.yonsm.net" target="_blank" rel="noopener">Yonsm.NET</a></li></ol>]]></content>
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的 Blog 今天开通了……</title>
      <link href="/blog/2014/10/25/2014-10-25-hello-blog/"/>
      <content type="html"><![CDATA[<p>呼啦呼啦,开博啦…一直想捣鼓一个自己的博客,可是一直坚持不下来,因为懒得记录,因为害怕学习各种新东西,不过最近研究了下Jekyll,发现还挺简单的,尝试了下,但是css一直没用上,感觉奇怪,发觉可以直接fork别人的模板,这个还真是挺方便的</p><p>感谢<a href="http://www.yonsm.net" target="_blank" rel="noopener">Yonsm.NET</a><br>感谢<a href="http://webfrogs.me" target="_blank" rel="noopener">WebFrog</a>.开源万岁:)</p>]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux基本使用</title>
      <link href="/blog/2014/01/27/2014-11-27-linux-base/"/>
      <content type="html"><![CDATA[<p>Control+d 退出<br>Control+l 清屏</p><p>###命令行        </p><ul><li>创建文件夹 mkdir aFolder</li><li>删除文件: rm aFile    </li><li>删除文件夹:rm -r AFolder/ </li><li>查看某个命令行使用: man rm</li><li>退出查看某个命令行: q</li><li>下一处 Enter键    </li></ul><p>###文件系统树<br>Linux只有一个系统树<br>Linux的分区为挂载点<br>挂载点:对应到系统树的某个层级范围    </p><p>根目录:Root Directory     /<br>当前工作目录:用户当前所站立的文件点,使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">绝对路径:</span><br><span class="line">采用/开始,如 /Desktop</span><br><span class="line"></span><br><span class="line">相对路径:</span><br><span class="line">一般采用 . ..开始</span><br><span class="line">.表示当前目录: 如 ./abc 表示当前目录中的abc文件</span><br><span class="line">.. 表示父目录  如 ../abc 表示父文件夹的abc文件</span><br><span class="line"></span><br><span class="line">cd:Change directory</span><br><span class="line"></span><br><span class="line">###操作文件和目录</span><br><span class="line">#### * 常用命令</span><br><span class="line">copy</span><br></pre></td></tr></table></figure></p><p>$ cp file1 file2<br>$ cp -r dir1 dir2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move</span><br></pre></td></tr></table></figure></p><p>$ mv file ..<br>$ mv file dir/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">rename</span><br></pre></td></tr></table></figure></p><p>$ mv file1 file2 #如果file2存在,则将file2的内容替换为file1,然后删除file1<br>$ mv dir1 dir2 #dir2存在,则为移动操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">remove</span><br></pre></td></tr></table></figure></p><p>$ rm file<br>$ rm -r dir<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">创建文件:</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">$ touch a.txt</span><br><span class="line">$ &gt;a.txt</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#查看文件    </span><br><span class="line">$ cat a.txt</span><br><span class="line"></span><br><span class="line">#查看文件类型 </span><br><span class="line">$ file a.txt</span><br><span class="line"></span><br><span class="line">#查看隐藏文件</span><br><span class="line">$ ls -a</span><br><span class="line"></span><br><span class="line">#压缩</span><br><span class="line">zip:   $: zip -r xxx.zip  directory/</span><br><span class="line">unzip: $: unzip xxx.zip</span><br><span class="line"></span><br><span class="line">tar.gz:   </span><br><span class="line">$:tar zxvf aa.tar.gz</span><br><span class="line">$:tar zcvf  aaa.tar.gz abc/</span><br><span class="line"></span><br><span class="line">.tar.bz2</span><br><span class="line">$:tar jxvf aa.tar.gz</span><br><span class="line">$:tar jcvf  aaa.tar.gz abc/</span><br><span class="line"></span><br><span class="line">备注:file命令查看结果是POSIX tar archive格式，使用命令</span><br><span class="line"></span><br><span class="line">$tar xvf xxx.tar</span><br></pre></td></tr></table></figure><p>####文件:三种文件    </p><ul><li>stdin : 0,</li><li>stdout: 1, 直接显示在屏幕上</li><li>stderr: 2, 直接显示在屏幕上(报错信息)</li></ul><p>#####输出重定向stdin &gt;<br>$ cat file1 &gt; file       (将file1赋值给file)<br>$ cat file1 file2 &gt; file (两个文件合并为新文件)</p><p>#####重定向错误输出 2&gt;<br>$ ls xsdfsd 2&gt; output.txt</p><p>######管道线: |</p><p>####权限<br>三种权限:    </p><ul><li>Read   :r    </li><li>Write  :w    </li><li>Excute :x    </li></ul><p>查看文件权限        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#文件</span><br><span class="line">apple@ubuntu:~/Desktop$ ls -l out.txt</span><br><span class="line">-rw-rw-r-- 1 apple apple 0 Nov 27 06:33 out.txt</span><br><span class="line"></span><br><span class="line">#目录</span><br><span class="line">apple@ubuntu:~/Desktop$ ls -ld dir1</span><br><span class="line">drwxrwxr-x 2 apple apple 4096 Nov 26 21:12 dir1</span><br><span class="line"></span><br><span class="line">$ chmod +w .</span><br><span class="line">$ chmod 666 a.txt #6 = 110 代表read, write</span><br><span class="line"></span><br><span class="line"># 三种用户,Owner,group world</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ chomod u+x a.txt (Owner)</span><br><span class="line">$ chomod a-w a.txt (group)</span><br><span class="line">$ chomod o-x a.txt (world)</span><br></pre></td></tr></table></figure><h4 id="进程-PID-process-id"><a href="#进程-PID-process-id" class="headerlink" title="进程 PID(process id)"></a>进程 PID(process id)</h4><p>复制文本: Control Shift  c<br>黏贴: Control Shift  v    </p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>locate    :(从数据库中读取信息,有延迟)<br>find<br>grep    </p><p>sudo updatedb:强制更新文件数据库<br>find . -type f<br>f 代表文件<br>d 代表目录</p><h4 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h4><ul><li>下载安装包</li><li>Deb</li><li>apt-get</li></ul><p>编译三步骤:</p><ol><li>.configure</li><li>.make</li><li>.make install</li></ol><p>deb包<br>包含:程序本身,配置文件,安装位置, 依赖关系</p><p>安装deb包:<br>sudo dpkg -i xxx.deb    </p><p>软件仓库<br>apt-get</p><p>Unbuntu安装GO(<a href="http://blog.chinaunix.net/uid-20718384-id-3338012.html" target="_blank" rel="noopener">参考网址</a>)</p><ol><li>下载源码go1.3.3.linux-amd64.tar</li><li>解压缩  $: tar xvf go1.3.3.linux-amd64.tar</li><li>复制到根目录中 $:cp -r go ~</li><li>打开根目录中的rrc $: cd ~/go/src</li><li>安装 ./all.bash</li></ol>]]></content>
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
